{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "anyOf": [
    {
      "type": "object",
      "properties": {
        "get": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of a GET operation on this path.",
          "markdownDescription": "A definition of a GET operation on this path.",
          "examples": [
            {
              "summary": "Get users",
              "responses": {
                "200": {
                  "description": "Success"
                }
              }
            }
          ]
        },
        "put": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of a PUT operation on this path.",
          "markdownDescription": "A definition of a PUT operation on this path.",
          "examples": [
            {
              "summary": "Update user",
              "responses": {
                "200": {
                  "description": "Success"
                }
              }
            }
          ]
        },
        "post": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of a POST operation on this path.",
          "markdownDescription": "A definition of a POST operation on this path.",
          "examples": [
            {
              "summary": "Create user",
              "responses": {
                "201": {
                  "description": "Created"
                }
              }
            }
          ]
        },
        "delete": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of a DELETE operation on this path.",
          "markdownDescription": "A definition of a DELETE operation on this path.",
          "examples": [
            {
              "summary": "Delete user",
              "responses": {
                "204": {
                  "description": "No Content"
                }
              }
            }
          ]
        },
        "options": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of an OPTIONS operation on this path.",
          "markdownDescription": "A definition of an OPTIONS operation on this path.",
          "examples": [
            {
              "summary": "Get options",
              "responses": {
                "200": {
                  "description": "Options"
                }
              }
            }
          ]
        },
        "head": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of a HEAD operation on this path.",
          "markdownDescription": "A definition of a HEAD operation on this path.",
          "examples": [
            {
              "summary": "Check if resource exists",
              "responses": {
                "200": {
                  "description": "Exists"
                }
              }
            }
          ]
        },
        "patch": {
          "$ref": "#/definitions/Operation",
          "description": "A definition of a PATCH operation on this path.",
          "markdownDescription": "A definition of a PATCH operation on this path.",
          "examples": [
            {
              "summary": "Partially update user",
              "responses": {
                "200": {
                  "description": "Success"
                }
              }
            }
          ]
        },
        "parameters": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Parameter"
              },
              {
                "$ref": "#/definitions/BaseReference"
              }
            ]
          },
          "description": "A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location.",
          "markdownDescription": "A list of parameters that are applicable for all the operations described\nunder this path. These parameters can be overridden at the operation level,\nbut cannot be removed there. The list MUST NOT include duplicated parameters.\nA unique parameter is defined by a combination of a name and location.",
          "examples": [
            [
              {
                "name": "limit",
                "in": "query",
                "type": "integer"
              }
            ]
          ]
        }
      }
    },
    {
      "$ref": "#/definitions/BaseReference"
    }
  ],
  "description": "Path Item Object\n\nDescribes the operations available on a single path. A Path Item may be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.",
  "markdownDescription": "Path Item Object\n\nDescribes the operations available on a single path. A Path Item may be empty,\ndue to ACL constraints. The path itself is still exposed to the documentation\nviewer but they will not know which operations and parameters are available.",
  "definitions": {
    "Specification": {
      "type": "object",
      "properties": {
        "swagger": {
          "type": "string",
          "const": "2.0",
          "description": "Specifies the Swagger specification version being used. Must be \"2.0\" for this specification.",
          "markdownDescription": "Specifies the Swagger specification version being used.\nMust be \"2.0\" for this specification."
        },
        "info": {
          "$ref": "#/definitions/Info",
          "description": "Provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in the Swagger-UI for convenience.",
          "markdownDescription": "Provides metadata about the API. The metadata can be used by the clients\nif needed, and can be presented in the Swagger-UI for convenience."
        },
        "host": {
          "type": "string",
          "description": "The host (name or IP) serving the API. This MUST be the host only and does not include the scheme nor sub-paths. It MAY include a port. If the host is not included, the host serving the documentation is to be used (including the port). The host does not support path templating.",
          "markdownDescription": "The host (name or IP) serving the API. This MUST be the host only and does\nnot include the scheme nor sub-paths. It MAY include a port. If the host\nis not included, the host serving the documentation is to be used\n(including the port). The host does not support path templating.",
          "examples": [
            "api.example.com",
            "api.example.com:8080"
          ]
        },
        "basePath": {
          "type": "string",
          "description": "The base path on which the API is served, which is relative to the host. If it is not included, the API is served directly under the host. The value MUST start with a leading slash (/). The basePath does not support path templating.",
          "markdownDescription": "The base path on which the API is served, which is relative to the host.\nIf it is not included, the API is served directly under the host.\nThe value MUST start with a leading slash (/). The basePath does not\nsupport path templating.",
          "examples": [
            "/v1",
            "/api/v2"
          ]
        },
        "schemes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "ws",
              "wss"
            ]
          },
          "description": "The transfer protocol of the API. Values MUST be from the list: \"http\", \"https\", \"ws\", \"wss\". If the schemes is not included, the default scheme to be used is the one used to access the specification.",
          "markdownDescription": "The transfer protocol of the API. Values MUST be from the list:\n\"http\", \"https\", \"ws\", \"wss\". If the schemes is not included, the default\nscheme to be used is the one used to access the specification.",
          "examples": [
            [
              "https",
              "http"
            ],
            [
              "wss"
            ]
          ]
        },
        "consumes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of MIME types the APIs can consume. This is global to all APIs but can be overridden on specific API calls. Value MUST be as described under Mime Types.",
          "markdownDescription": "A list of MIME types the APIs can consume. This is global to all APIs\nbut can be overridden on specific API calls. Value MUST be as described\nunder Mime Types.",
          "examples": [
            [
              "application/json"
            ],
            [
              "application/xml",
              "application/json"
            ]
          ]
        },
        "produces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of MIME types the APIs can produce. This is global to all APIs but can be overridden on specific API calls. Value MUST be as described under Mime Types.",
          "markdownDescription": "A list of MIME types the APIs can produce. This is global to all APIs\nbut can be overridden on specific API calls. Value MUST be as described\nunder Mime Types.",
          "examples": [
            [
              "application/json"
            ],
            [
              "application/xml",
              "application/json"
            ]
          ]
        },
        "paths": {
          "$ref": "#/definitions/Paths",
          "description": "The available paths and operations for the API. This is the root of the Path Item Object. It does not define a path or a basePath, they are defined in the Paths Object. A relative path to an individual endpoint. The field name MUST begin with a slash. The path is appended to the basePath in order to construct the full URL. Path templating is allowed.",
          "markdownDescription": "The available paths and operations for the API. This is the root of the\nPath Item Object. It does not define a path or a basePath, they are defined\nin the Paths Object. A relative path to an individual endpoint. The field\nname MUST begin with a slash. The path is appended to the basePath in order\nto construct the full URL. Path templating is allowed."
        },
        "definitions": {
          "$ref": "#/definitions/Definitions",
          "description": "An object to hold data types produced and consumed by operations. These data types can be primitives, arrays or models.",
          "markdownDescription": "An object to hold data types produced and consumed by operations.\nThese data types can be primitives, arrays or models."
        },
        "parameters": {
          "$ref": "#/definitions/ParametersDefinitions",
          "description": "An object to hold parameters that can be used across operations. This property does not define global parameters for all operations.",
          "markdownDescription": "An object to hold parameters that can be used across operations.\nThis property does not define global parameters for all operations.",
          "examples": [
            {
              "pageParam": {
                "name": "page",
                "in": "query",
                "type": "integer"
              }
            }
          ]
        },
        "responses": {
          "$ref": "#/definitions/ResponsesDefinitions",
          "description": "An object to hold responses that can be used across operations. This property does not define global responses for all operations.",
          "markdownDescription": "An object to hold responses that can be used across operations.\nThis property does not define global responses for all operations.",
          "examples": [
            {
              "NotFound": {
                "description": "Entity not found"
              }
            }
          ]
        },
        "securityDefinitions": {
          "$ref": "#/definitions/SecurityDefinitions",
          "description": "Security scheme definitions that can be used by the operations. Supported schemes are basic authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).",
          "markdownDescription": "Security scheme definitions that can be used by the operations.\nSupported schemes are basic authentication, an API key (either as a header\nor as a query parameter) and OAuth2's common flows (implicit, password,\napplication and access code).",
          "examples": [
            {
              "api_key": {
                "type": "apiKey",
                "in": "header",
                "name": "X-API-Key"
              }
            }
          ]
        },
        "security": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityRequirement"
          },
          "description": "A declaration of which security schemes are applied for the API as a whole. The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements). Individual operations can override this definition.",
          "markdownDescription": "A declaration of which security schemes are applied for the API as a whole.\nThe list of values describes alternative security schemes that can be used\n(that is, there is a logical OR between the security requirements).\nIndividual operations can override this definition.",
          "examples": [
            [
              {
                "api_key": []
              }
            ],
            [
              {
                "oauth2": [
                  "read",
                  "write"
                ]
              }
            ]
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "A list of tags used by the specification with additional metadata. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared may be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.",
          "markdownDescription": "A list of tags used by the specification with additional metadata.\nThe order of the tags can be used to reflect on their order by the\nparsing tools. Not all tags that are used by the Operation Object must\nbe declared. The tags that are not declared may be organized randomly\nor based on the tools' logic. Each tag name in the list MUST be unique.",
          "examples": [
            [
              {
                "name": "users",
                "description": "User management"
              }
            ]
          ]
        },
        "externalDocs": {
          "$ref": "#/definitions/ExternalDocumentation",
          "description": "Additional external documentation.",
          "markdownDescription": "Additional external documentation.",
          "examples": [
            {
              "description": "Find out more about our API",
              "url": "https://example.com/docs"
            }
          ]
        }
      },
      "required": [
        "info",
        "paths",
        "swagger"
      ],
      "description": "Root Swagger 2.0 Schema (Swagger Object)\n\nThis is the root document object of the OpenAPI specification. It contains all the metadata about the API being described. This object is based on the JSON Schema Specification Draft 4 and uses a predefined subset of it.\n\nThe Swagger Object is the root of the specification document and contains all the information about the API, including its metadata, available paths, data models, security schemes, and more.",
      "markdownDescription": "Root Swagger 2.0 Schema (Swagger Object)\n\nThis is the root document object of the OpenAPI specification. It contains\nall the metadata about the API being described. This object is based on the\nJSON Schema Specification Draft 4 and uses a predefined subset of it.\n\nThe Swagger Object is the root of the specification document and contains\nall the information about the API, including its metadata, available paths,\ndata models, security schemes, and more."
    },
    "Info": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the application. This field is required.",
          "markdownDescription": "The title of the application. This field is required.",
          "examples": [
            "Swagger Sample App",
            "My API"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description of the application. GFM syntax can be used for rich text representation.",
          "markdownDescription": "A short description of the application. GFM syntax can be used for rich text representation.",
          "examples": [
            "This is a sample server Petstore server.",
            "A comprehensive API for managing user data"
          ]
        },
        "termsOfService": {
          "type": "string",
          "description": "The Terms of Service for the API.",
          "markdownDescription": "The Terms of Service for the API.",
          "examples": [
            "http://swagger.io/terms/",
            "https://example.com/terms"
          ]
        },
        "contact": {
          "$ref": "#/definitions/Contact",
          "description": "The contact information for the exposed API.",
          "markdownDescription": "The contact information for the exposed API.",
          "examples": [
            {
              "name": "API Support",
              "email": "support@example.com"
            }
          ]
        },
        "license": {
          "$ref": "#/definitions/License",
          "description": "The license information for the exposed API.",
          "markdownDescription": "The license information for the exposed API.",
          "examples": [
            {
              "name": "Apache 2.0",
              "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
          ]
        },
        "version": {
          "type": "string",
          "description": "Provides the version of the application API (not to be confused with the specification version). This field is required.",
          "markdownDescription": "Provides the version of the application API (not to be confused with the specification version).\nThis field is required.",
          "examples": [
            "1.0.1",
            "2.0.0"
          ]
        }
      },
      "required": [
        "title",
        "version"
      ],
      "description": "Info Object\n\nThe object provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in the Swagger-UI for convenience.",
      "markdownDescription": "Info Object\n\nThe object provides metadata about the API. The metadata can be used by the clients\nif needed, and can be presented in the Swagger-UI for convenience."
    },
    "Contact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the contact person/organization.",
          "markdownDescription": "The identifying name of the contact person/organization.",
          "examples": [
            "API Support",
            "John Doe"
          ]
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the contact information. MUST be in the format of a URL.",
          "markdownDescription": "The URL pointing to the contact information. MUST be in the format of a URL.",
          "examples": [
            "http://www.swagger.io/support",
            "https://example.com/contact"
          ]
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact person/organization. MUST be in the format of an email address.",
          "markdownDescription": "The email address of the contact person/organization. MUST be in the format of an email address.",
          "examples": [
            "support@swagger.io",
            "contact@example.com"
          ]
        }
      },
      "description": "Contact Object\n\nContact information for the exposed API.",
      "markdownDescription": "Contact Object\n\nContact information for the exposed API."
    },
    "License": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The license name used for the API. This field is required.",
          "markdownDescription": "The license name used for the API. This field is required.",
          "examples": [
            "MIT License",
            "Apache License 2.0",
            "Proprietary Foo License"
          ]
        },
        "url": {
          "type": "string",
          "description": "A URL to the license used for the API. MUST be in the format of a URL.",
          "markdownDescription": "A URL to the license used for the API. MUST be in the format of a URL.",
          "examples": [
            "https://opensource.org/license/mit/",
            "https://www.apache.org/licenses/LICENSE-2.0",
            "https://example.com/licenses/foo-1.0"
          ]
        }
      },
      "required": [
        "name"
      ],
      "description": "----- License Object\n-----\n\nLicense information for the exposed API.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#license-object Swagger 2.0 License }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nLicense Object\n-----\n\nLicense information for the exposed API.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#license-object Swagger 2.0 License }  |\n\n-----\nFields\n-----"
    },
    "Paths": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PathItem"
      },
      "description": "Paths Object\n\nHolds the relative paths to the individual endpoints. The path is appended to the basePath in order to construct the full URL. The Paths may be empty, due to ACL constraints.",
      "markdownDescription": "Paths Object\n\nHolds the relative paths to the individual endpoints. The path is appended to the\nbasePath in order to construct the full URL. The Paths may be empty, due to ACL constraints."
    },
    "PathItem": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "get": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of a GET operation on this path.",
              "markdownDescription": "A definition of a GET operation on this path.",
              "examples": [
                {
                  "summary": "Get users",
                  "responses": {
                    "200": {
                      "description": "Success"
                    }
                  }
                }
              ]
            },
            "put": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of a PUT operation on this path.",
              "markdownDescription": "A definition of a PUT operation on this path.",
              "examples": [
                {
                  "summary": "Update user",
                  "responses": {
                    "200": {
                      "description": "Success"
                    }
                  }
                }
              ]
            },
            "post": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of a POST operation on this path.",
              "markdownDescription": "A definition of a POST operation on this path.",
              "examples": [
                {
                  "summary": "Create user",
                  "responses": {
                    "201": {
                      "description": "Created"
                    }
                  }
                }
              ]
            },
            "delete": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of a DELETE operation on this path.",
              "markdownDescription": "A definition of a DELETE operation on this path.",
              "examples": [
                {
                  "summary": "Delete user",
                  "responses": {
                    "204": {
                      "description": "No Content"
                    }
                  }
                }
              ]
            },
            "options": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of an OPTIONS operation on this path.",
              "markdownDescription": "A definition of an OPTIONS operation on this path.",
              "examples": [
                {
                  "summary": "Get options",
                  "responses": {
                    "200": {
                      "description": "Options"
                    }
                  }
                }
              ]
            },
            "head": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of a HEAD operation on this path.",
              "markdownDescription": "A definition of a HEAD operation on this path.",
              "examples": [
                {
                  "summary": "Check if resource exists",
                  "responses": {
                    "200": {
                      "description": "Exists"
                    }
                  }
                }
              ]
            },
            "patch": {
              "$ref": "#/definitions/Operation",
              "description": "A definition of a PATCH operation on this path.",
              "markdownDescription": "A definition of a PATCH operation on this path.",
              "examples": [
                {
                  "summary": "Partially update user",
                  "responses": {
                    "200": {
                      "description": "Success"
                    }
                  }
                }
              ]
            },
            "parameters": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Parameter"
                  },
                  {
                    "$ref": "#/definitions/BaseReference"
                  }
                ]
              },
              "description": "A list of parameters that are applicable for all the operations described under this path. These parameters can be overridden at the operation level, but cannot be removed there. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location.",
              "markdownDescription": "A list of parameters that are applicable for all the operations described\nunder this path. These parameters can be overridden at the operation level,\nbut cannot be removed there. The list MUST NOT include duplicated parameters.\nA unique parameter is defined by a combination of a name and location.",
              "examples": [
                [
                  {
                    "name": "limit",
                    "in": "query",
                    "type": "integer"
                  }
                ]
              ]
            }
          }
        },
        {
          "$ref": "#/definitions/BaseReference"
        }
      ],
      "description": "Path Item Object\n\nDescribes the operations available on a single path. A Path Item may be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.",
      "markdownDescription": "Path Item Object\n\nDescribes the operations available on a single path. A Path Item may be empty,\ndue to ACL constraints. The path itself is still exposed to the documentation\nviewer but they will not know which operations and parameters are available."
    },
    "Operation": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.",
          "markdownDescription": "A list of tags for API documentation control. Tags can be used for logical\ngrouping of operations by resources or any other qualifier.",
          "examples": [
            [
              "users",
              "authentication"
            ],
            [
              "pets"
            ]
          ]
        },
        "summary": {
          "type": "string",
          "description": "A short summary of what the operation does. For maximum readability in swagger-ui, this field SHOULD be less than 120 characters.",
          "markdownDescription": "A short summary of what the operation does. For maximum readability in\nswagger-ui, this field SHOULD be less than 120 characters.",
          "examples": [
            "Get user by ID",
            "Create a new pet"
          ]
        },
        "description": {
          "type": "string",
          "description": "A verbose explanation of the operation behavior. GFM syntax can be used for rich text representation.",
          "markdownDescription": "A verbose explanation of the operation behavior. GFM syntax can be used\nfor rich text representation.",
          "examples": [
            "Retrieves a specific user by their unique identifier. Returns user details including name, email, and profile information."
          ]
        },
        "externalDocs": {
          "$ref": "#/definitions/ExternalDocumentation",
          "description": "Additional external documentation for this operation.",
          "markdownDescription": "Additional external documentation for this operation.",
          "examples": [
            {
              "description": "Find out more about this operation",
              "url": "https://example.com/docs"
            }
          ]
        },
        "operationId": {
          "type": "string",
          "description": "Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.",
          "markdownDescription": "Unique string used to identify the operation. The id MUST be unique among\nall operations described in the API. Tools and libraries MAY use the\noperationId to uniquely identify an operation, therefore, it is recommended\nto follow common programming naming conventions.",
          "examples": [
            "getUserById",
            "createPet"
          ]
        },
        "consumes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of MIME types the operation can consume. This overrides the consumes definition at the Swagger Object level. An empty value MAY be used to clear the global definition. Value MUST be as described under Mime Types.",
          "markdownDescription": "A list of MIME types the operation can consume. This overrides the consumes\ndefinition at the Swagger Object level. An empty value MAY be used to clear\nthe global definition. Value MUST be as described under Mime Types.",
          "examples": [
            [
              "application/json"
            ],
            [
              "application/xml",
              "application/json"
            ]
          ]
        },
        "produces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of MIME types the operation can produce. This overrides the produces definition at the Swagger Object level. An empty value MAY be used to clear the global definition. Value MUST be as described under Mime Types.",
          "markdownDescription": "A list of MIME types the operation can produce. This overrides the produces\ndefinition at the Swagger Object level. An empty value MAY be used to clear\nthe global definition. Value MUST be as described under Mime Types.",
          "examples": [
            [
              "application/json"
            ],
            [
              "application/xml",
              "application/json"
            ]
          ]
        },
        "parameters": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Parameter"
              },
              {
                "$ref": "#/definitions/BaseReference"
              }
            ]
          },
          "description": "A list of parameters that are applicable for this operation. If a parameter is already defined at the Path Item, the new definition will override it but can never remove it. The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of a name and location.",
          "markdownDescription": "A list of parameters that are applicable for this operation. If a parameter\nis already defined at the Path Item, the new definition will override it\nbut can never remove it. The list MUST NOT include duplicated parameters.\nA unique parameter is defined by a combination of a name and location.",
          "examples": [
            [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ]
          ]
        },
        "responses": {
          "$ref": "#/definitions/ResponsesMap",
          "description": "The list of possible responses as they are returned from executing this operation. This field MUST be present and MUST contain at least one response.",
          "markdownDescription": "The list of possible responses as they are returned from executing this operation.\nThis field MUST be present and MUST contain at least one response.",
          "examples": [
            {
              "200": {
                "description": "Success",
                "schema": {
                  "type": "object"
                }
              }
            }
          ]
        },
        "schemes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "ws",
              "wss"
            ]
          },
          "description": "The transfer protocol for the operation. Values MUST be from the list: \"http\", \"https\", \"ws\", \"wss\". The value overrides the Swagger Object schemes definition.",
          "markdownDescription": "The transfer protocol for the operation. Values MUST be from the list:\n\"http\", \"https\", \"ws\", \"wss\". The value overrides the Swagger Object\nschemes definition.",
          "examples": [
            [
              "https",
              "http"
            ],
            [
              "wss"
            ]
          ]
        },
        "deprecated": {
          "type": "boolean",
          "description": "Declares this operation to be deprecated. Usage of the declared operation should be refrained. Default value is false.",
          "markdownDescription": "Declares this operation to be deprecated. Usage of the declared operation\nshould be refrained. Default value is false.",
          "examples": [
            true
          ],
          "default": false
        },
        "security": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "A declaration of which security schemes are applied for this operation. The list of values describes alternative security schemes that can be used (that is, there is a logical OR between the security requirements). This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.",
          "markdownDescription": "A declaration of which security schemes are applied for this operation.\nThe list of values describes alternative security schemes that can be used\n(that is, there is a logical OR between the security requirements).\nThis definition overrides any declared top-level security. To remove a\ntop-level security declaration, an empty array can be used.",
          "examples": [
            [
              {
                "api_key": []
              }
            ],
            [
              {
                "oauth2": [
                  "read",
                  "write"
                ]
              }
            ]
          ]
        }
      },
      "required": [
        "responses"
      ],
      "description": "Operation Object\n\nDescribes a single API operation on a path. A unique operation is defined by a combination of a path and an HTTP method.",
      "markdownDescription": "Operation Object\n\nDescribes a single API operation on a path. A unique operation is defined\nby a combination of a path and an HTTP method."
    },
    "ExternalDocumentation": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A short description of the target documentation. GFM syntax can be used for rich text representation.\n\nThis description provides context about what the external documentation contains and helps developers understand when and why they should reference it.",
          "markdownDescription": "A short description of the target documentation. GFM syntax can be used for\nrich text representation.\n\nThis description provides context about what the external documentation\ncontains and helps developers understand when and why they should\nreference it.",
          "examples": [
            "Find more info here",
            "Complete API documentation with examples and tutorials",
            "SDK documentation and code examples",
            "Step-by-step integration guide"
          ]
        },
        "url": {
          "type": "string",
          "description": "The URL for the target documentation. Value MUST be in the format of a URL. This field is required.\n\nThe URL should point to a valid, accessible resource that provides additional documentation about the API or specific aspects of it.",
          "markdownDescription": "The URL for the target documentation. Value MUST be in the format of a URL.\nThis field is required.\n\nThe URL should point to a valid, accessible resource that provides\nadditional documentation about the API or specific aspects of it.",
          "examples": [
            "https://swagger.io",
            "https://docs.example.com/api",
            "https://github.com/example/sdk",
            "https://example.com/integration-guide"
          ]
        }
      },
      "required": [
        "url"
      ],
      "description": "----- External Documentation Object\n-----\n\nAllows referencing an external resource for extended documentation. This object provides a way to link to additional documentation that supplements the API specification, such as detailed guides, tutorials, or reference materials.\n\nExternal documentation is commonly used to provide:\n- Detailed API guides and tutorials\n- SDK documentation and examples\n- Integration guides and best practices\n- Additional reference materials\n- Community resources and support\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#external-documentation-object Swagger 2.0 External Documentation Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nExternal Documentation Object\n-----\n\nAllows referencing an external resource for extended documentation.\nThis object provides a way to link to additional documentation that\nsupplements the API specification, such as detailed guides, tutorials,\nor reference materials.\n\nExternal documentation is commonly used to provide:\n- Detailed API guides and tutorials\n- SDK documentation and examples\n- Integration guides and best practices\n- Additional reference materials\n- Community resources and support\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#external-documentation-object Swagger 2.0 External Documentation Object }  |\n\n-----\nFields\n-----"
    },
    "Parameter": {
      "anyOf": [
        {
          "$ref": "#/definitions/BodyParameter"
        },
        {
          "$ref": "#/definitions/NonBodyParameter"
        }
      ]
    },
    "BodyParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter. For body parameters, this is used for documentation purposes only and has no effect on the parameter itself.",
          "markdownDescription": "The name of the parameter. For body parameters, this is used for documentation\npurposes only and has no effect on the parameter itself.",
          "examples": [
            "user",
            "data",
            "payload"
          ]
        },
        "in": {
          "type": "string",
          "const": "body",
          "description": "The location of the parameter. Must be \"body\" for body parameters.",
          "markdownDescription": "The location of the parameter. Must be \"body\" for body parameters.",
          "examples": [
            "body"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use. GFM syntax can be used for rich text representation.",
          "markdownDescription": "A brief description of the parameter. This could contain examples of use.\nGFM syntax can be used for rich text representation.",
          "examples": [
            "User object to create",
            "Request payload containing the data to process"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Determines whether this parameter is mandatory. Default value is false.",
          "markdownDescription": "Determines whether this parameter is mandatory. Default value is false.",
          "examples": [
            true
          ],
          "default": false
        },
        "schema": {
          "$ref": "#/definitions/Schema",
          "description": "The schema defining the type used for the body parameter. This property is required for body parameters.",
          "markdownDescription": "The schema defining the type used for the body parameter. This property is\nrequired for body parameters.",
          "examples": [
            {
              "$ref": "#/definitions/User"
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "required": [
        "name",
        "in",
        "schema"
      ],
      "description": "----- Parameter Object (Body Parameter)\n-----\n\nDescribes a body parameter for an API operation. Body parameters represent the payload that's appended to the HTTP request. Since there can only be one payload, there can only be one body parameter per operation.\n\nBody parameters use a schema to define the structure of the request payload, which can be any valid Swagger schema including objects, arrays, and primitives.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#parameter-object Swagger 2.0 Parameter Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nParameter Object (Body Parameter)\n-----\n\nDescribes a body parameter for an API operation. Body parameters represent\nthe payload that's appended to the HTTP request. Since there can only be one\npayload, there can only be one body parameter per operation.\n\nBody parameters use a schema to define the structure of the request payload,\nwhich can be any valid Swagger schema including objects, arrays, and primitives.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#parameter-object Swagger 2.0 Parameter Object }  |\n\n-----\nFields\n-----"
    },
    "Schema": {
      "anyOf": [
        {
          "$ref": "#/definitions/StringSchema"
        },
        {
          "$ref": "#/definitions/NumberSchema"
        },
        {
          "$ref": "#/definitions/IntegerSchema"
        },
        {
          "$ref": "#/definitions/BooleanSchema"
        },
        {
          "$ref": "#/definitions/FileSchema"
        },
        {
          "$ref": "#/definitions/ArraySchema"
        },
        {
          "$ref": "#/definitions/ObjectSchema"
        },
        {
          "$ref": "#/definitions/BaseReference"
        }
      ],
      "description": "----- Schema Object (Swagger 2.0)\n-----\n\nThe Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a subset of JSON Schema Specification Draft 4 and uses the same formatting rules (sections 9-11).\n\nIn Swagger 2.0, this is a limited subset of JSON Schema. Here we model it as a discriminated union that enforces mutual-exclusion and co-occurrence rules as specified in the Swagger 2.0 specification.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n\n----- Schema Types\n-----\n\nThe Schema union includes the following types:\n\n**Reference Schema:**",
      "markdownDescription": "-----\nSchema Object (Swagger 2.0)\n-----\n\nThe Schema Object allows the definition of input and output data types.\nThese types can be objects, but also primitives and arrays. This object\nis a subset of JSON Schema Specification Draft 4 and uses the same\nformatting rules (sections 9-11).\n\nIn Swagger 2.0, this is a limited subset of JSON Schema. Here we model it\nas a discriminated union that enforces mutual-exclusion and co-occurrence\nrules as specified in the Swagger 2.0 specification.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n\n-----\nSchema Types\n-----\n\nThe Schema union includes the following types:\n\n**Reference Schema:**"
    },
    "StringSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "string",
          "description": "The type of the schema. Must be \"string\" for string schemas.\n\nThis property is required and must be set to \"string\" to indicate that this schema represents string data.",
          "markdownDescription": "The type of the schema. Must be \"string\" for string schemas.\n\nThis property is required and must be set to \"string\" to indicate\nthat this schema represents string data.",
          "examples": [
            "string"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type, enabling more precise validation and better tooling support. Swagger 2.0 defines several standard formats, but custom formats are also allowed.",
          "markdownDescription": "The extending format for the previously mentioned type.\nSee Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type,\nenabling more precise validation and better tooling support. Swagger 2.0\ndefines several standard formats, but custom formats are also allowed.",
          "examples": [
            "int32",
            "date",
            "email",
            "uuid"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema represents and how it should be used. It's commonly displayed in API documentation and code generation tools.",
          "markdownDescription": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema\nrepresents and how it should be used. It's commonly displayed in API\ndocumentation and code generation tools.",
          "examples": [
            "A user object containing basic information",
            "Email address in RFC 5322 format"
          ]
        },
        "title": {
          "type": "string",
          "description": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used in documentation and UI displays. It should be concise but descriptive.",
          "markdownDescription": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used\nin documentation and UI displays. It should be concise but descriptive.",
          "examples": [
            "User",
            "Pet",
            "Order"
          ]
        },
        "default": {
          "description": "Declares the value of the schema that the server will use if none is provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema. The default value must be valid according to the schema's type and constraints.",
          "markdownDescription": "Declares the value of the schema that the server will use if none is provided.\nUnlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema.\nThe default value must be valid according to the schema's type and constraints.",
          "examples": [
            "defaultValue",
            10,
            {
              "name": "John",
              "age": 30
            },
            [
              "item1",
              "item2"
            ]
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "markdownDescription": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ],
            [
              "red",
              "green",
              "blue"
            ],
            [
              1,
              2,
              3,
              4,
              5
            ]
          ]
        },
        "example": {
          "description": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind of data is expected. They are commonly used by documentation generators and API testing tools.",
          "markdownDescription": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind\nof data is expected. They are commonly used by documentation generators\nand API testing tools.",
          "examples": [
            {
              "name": "Puma",
              "id": 1
            },
            "example string value",
            42,
            [
              "item1",
              "item2"
            ]
          ]
        },
        "maxLength": {
          "type": "number",
          "description": "A string is valid against \"maxLength\" if its length is less than or equal to this value.",
          "markdownDescription": "A string is valid against \"maxLength\" if its length is less than or equal to this value.",
          "examples": [
            100,
            255
          ]
        },
        "minLength": {
          "type": "number",
          "description": "A string is valid against \"minLength\" if its length is greater than or equal to this value.",
          "markdownDescription": "A string is valid against \"minLength\" if its length is greater than or equal to this value.",
          "examples": [
            1,
            8
          ]
        },
        "pattern": {
          "type": "string",
          "description": "A string is valid against \"pattern\" if the regular expression matches the string successfully. The regular expression syntax follows ECMA 262.",
          "markdownDescription": "A string is valid against \"pattern\" if the regular expression matches the string successfully.\nThe regular expression syntax follows ECMA 262.",
          "examples": [
            "^[a-zA-Z0-9]+$",
            "^\\d{4}-\\d{2}-\\d{2}$"
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "userName",
              "attribute": false
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "----- String Schema\n-----\n\nSchema for string data types in Swagger 2.0.\n\nString schemas represent textual data and support various formats and validation rules. They are one of the most commonly used schema types in API specifications, used for names, descriptions, identifiers, and other text-based data.\n\nString schemas support a wide range of formats including standard formats like email, date, and UUID, as well as custom formats defined by the API provider. They also support comprehensive validation through pattern matching, length constraints, and enumeration.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nString Schema\n-----\n\nSchema for string data types in Swagger 2.0.\n\nString schemas represent textual data and support various formats and validation\nrules. They are one of the most commonly used schema types in API specifications,\nused for names, descriptions, identifiers, and other text-based data.\n\nString schemas support a wide range of formats including standard formats like\nemail, date, and UUID, as well as custom formats defined by the API provider.\nThey also support comprehensive validation through pattern matching, length\nconstraints, and enumeration.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n-----\nFields\n-----"
    },
    "XMLObject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Replaces the name of the element/attribute used for the described schema property. When defined within the Items Object, it will affect the name of the individual XML elements within the list. When defined alongside type being array (outside the items), it will affect the wrapping element and only if wrapped is true.",
          "markdownDescription": "Replaces the name of the element/attribute used for the described schema property.\nWhen defined within the Items Object, it will affect the name of the individual\nXML elements within the list. When defined alongside type being array (outside\nthe items), it will affect the wrapping element and only if wrapped is true.",
          "examples": [
            "animal",
            "item",
            "person"
          ]
        },
        "namespace": {
          "type": "string",
          "description": "The URL of the namespace definition. Value SHOULD be in the form of a URL.",
          "markdownDescription": "The URL of the namespace definition. Value SHOULD be in the form of a URL.",
          "examples": [
            "http://example.com/schema/sample",
            "http://www.w3.org/2001/XMLSchema",
            "http://swagger.io/schema/sample"
          ]
        },
        "prefix": {
          "type": "string",
          "description": "The prefix to be used for the name.",
          "markdownDescription": "The prefix to be used for the name.",
          "examples": [
            "sample",
            "xs",
            "ex"
          ]
        },
        "attribute": {
          "type": "boolean",
          "description": "Declares whether the property definition translates to an attribute instead of an element. Default value is false.",
          "markdownDescription": "Declares whether the property definition translates to an attribute instead of an element.\nDefault value is false.",
          "examples": [
            true,
            false
          ],
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "description": "MAY be used only for an array definition. Signifies whether the array is wrapped (for example, <books><book/><book/></books>) or unwrapped (<book/><book/>). Default value is false. The definition takes effect only when defined alongside type being array (outside the items).",
          "markdownDescription": "MAY be used only for an array definition. Signifies whether the array is wrapped\n(for example, <books><book/><book/></books>) or unwrapped (<book/><book/>).\nDefault value is false. The definition takes effect only when defined alongside\ntype being array (outside the items).",
          "examples": [
            true,
            false
          ],
          "default": false
        }
      },
      "description": "----- XML Object\n-----\n\nA metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred (for singular/plural forms) and the name property should be used to add that information.\n\nThe XML Object provides additional metadata to describe the XML representation format of schema properties. It allows for precise control over how JSON schema definitions are translated to XML, including element naming, namespaces, attributes, and array wrapping.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#xml-object Swagger 2.0 XML Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nXML Object\n-----\n\nA metadata object that allows for more fine-tuned XML model definitions.\nWhen using arrays, XML element names are not inferred (for singular/plural forms)\nand the name property should be used to add that information.\n\nThe XML Object provides additional metadata to describe the XML representation\nformat of schema properties. It allows for precise control over how JSON\nschema definitions are translated to XML, including element naming, namespaces,\nattributes, and array wrapping.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#xml-object Swagger 2.0 XML Object }  |\n\n-----\nFields\n-----"
    },
    "NumberSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "number",
          "description": "The type of the schema. Must be \"number\" for number schemas.\n\nThis property is required and must be set to \"number\" to indicate that this schema represents numeric data (both integers and floating-point).",
          "markdownDescription": "The type of the schema. Must be \"number\" for number schemas.\n\nThis property is required and must be set to \"number\" to indicate\nthat this schema represents numeric data (both integers and floating-point).",
          "examples": [
            "number"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type, enabling more precise validation and better tooling support. Swagger 2.0 defines several standard formats, but custom formats are also allowed.",
          "markdownDescription": "The extending format for the previously mentioned type.\nSee Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type,\nenabling more precise validation and better tooling support. Swagger 2.0\ndefines several standard formats, but custom formats are also allowed.",
          "examples": [
            "int32",
            "date",
            "email",
            "uuid"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema represents and how it should be used. It's commonly displayed in API documentation and code generation tools.",
          "markdownDescription": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema\nrepresents and how it should be used. It's commonly displayed in API\ndocumentation and code generation tools.",
          "examples": [
            "A user object containing basic information",
            "Email address in RFC 5322 format"
          ]
        },
        "title": {
          "type": "string",
          "description": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used in documentation and UI displays. It should be concise but descriptive.",
          "markdownDescription": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used\nin documentation and UI displays. It should be concise but descriptive.",
          "examples": [
            "User",
            "Pet",
            "Order"
          ]
        },
        "default": {
          "description": "Declares the value of the schema that the server will use if none is provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema. The default value must be valid according to the schema's type and constraints.",
          "markdownDescription": "Declares the value of the schema that the server will use if none is provided.\nUnlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema.\nThe default value must be valid according to the schema's type and constraints.",
          "examples": [
            "defaultValue",
            10,
            {
              "name": "John",
              "age": 30
            },
            [
              "item1",
              "item2"
            ]
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "markdownDescription": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ],
            [
              "red",
              "green",
              "blue"
            ],
            [
              1,
              2,
              3,
              4,
              5
            ]
          ]
        },
        "example": {
          "description": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind of data is expected. They are commonly used by documentation generators and API testing tools.",
          "markdownDescription": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind\nof data is expected. They are commonly used by documentation generators\nand API testing tools.",
          "examples": [
            {
              "name": "Puma",
              "id": 1
            },
            "example string value",
            42,
            [
              "item1",
              "item2"
            ]
          ]
        },
        "multipleOf": {
          "type": "number",
          "description": "A number is valid against \"multipleOf\" if the result of the division of the instance by this keyword's value is an integer.",
          "markdownDescription": "A number is valid against \"multipleOf\" if the result of the division\nof the instance by this keyword's value is an integer.",
          "examples": [
            2,
            0.01
          ]
        },
        "maximum": {
          "type": "number",
          "description": "A number is valid against \"maximum\" if it is less than or equal to this value.",
          "markdownDescription": "A number is valid against \"maximum\" if it is less than or equal to this value.",
          "examples": [
            100,
            999.99
          ]
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "description": "A number is valid against \"exclusiveMaximum\" if it is strictly less than this value.",
          "markdownDescription": "A number is valid against \"exclusiveMaximum\" if it is strictly less than this value.",
          "examples": [
            false,
            true
          ]
        },
        "minimum": {
          "type": "number",
          "description": "A number is valid against \"minimum\" if it is greater than or equal to this value.",
          "markdownDescription": "A number is valid against \"minimum\" if it is greater than or equal to this value.",
          "examples": [
            0,
            1
          ]
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "description": "A number is valid against \"exclusiveMinimum\" if it is strictly greater than this value.",
          "markdownDescription": "A number is valid against \"exclusiveMinimum\" if it is strictly greater than this value.",
          "examples": [
            false,
            true
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "price",
              "attribute": false
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "----- Number Schema\n-----\n\nSchema for number data types in Swagger 2.0.\n\nNumber schemas represent numeric data including both integers and floating-point numbers. They support various formats and validation rules to ensure data integrity and provide meaningful constraints for numeric values.\n\nNumber schemas are commonly used for quantities, prices, measurements, and other numeric data in APIs. They support range validation, precision control, and multiple format specifications.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nNumber Schema\n-----\n\nSchema for number data types in Swagger 2.0.\n\nNumber schemas represent numeric data including both integers and floating-point\nnumbers. They support various formats and validation rules to ensure data\nintegrity and provide meaningful constraints for numeric values.\n\nNumber schemas are commonly used for quantities, prices, measurements, and\nother numeric data in APIs. They support range validation, precision control,\nand multiple format specifications.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n-----\nFields\n-----"
    },
    "IntegerSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "integer",
          "description": "The type of the schema. Must be \"integer\" for integer schemas.\n\nThis property is required and must be set to \"integer\" to indicate that this schema represents whole number data without fractional components.",
          "markdownDescription": "The type of the schema. Must be \"integer\" for integer schemas.\n\nThis property is required and must be set to \"integer\" to indicate\nthat this schema represents whole number data without fractional components.",
          "examples": [
            "integer"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type, enabling more precise validation and better tooling support. Swagger 2.0 defines several standard formats, but custom formats are also allowed.",
          "markdownDescription": "The extending format for the previously mentioned type.\nSee Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type,\nenabling more precise validation and better tooling support. Swagger 2.0\ndefines several standard formats, but custom formats are also allowed.",
          "examples": [
            "int32",
            "int64"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema represents and how it should be used. It's commonly displayed in API documentation and code generation tools.",
          "markdownDescription": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema\nrepresents and how it should be used. It's commonly displayed in API\ndocumentation and code generation tools.",
          "examples": [
            "A user object containing basic information",
            "Email address in RFC 5322 format"
          ]
        },
        "title": {
          "type": "string",
          "description": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used in documentation and UI displays. It should be concise but descriptive.",
          "markdownDescription": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used\nin documentation and UI displays. It should be concise but descriptive.",
          "examples": [
            "User",
            "Pet",
            "Order"
          ]
        },
        "default": {
          "description": "Declares the value of the schema that the server will use if none is provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema. The default value must be valid according to the schema's type and constraints.",
          "markdownDescription": "Declares the value of the schema that the server will use if none is provided.\nUnlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema.\nThe default value must be valid according to the schema's type and constraints.",
          "examples": [
            "defaultValue",
            10,
            {
              "name": "John",
              "age": 30
            },
            [
              "item1",
              "item2"
            ]
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "markdownDescription": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ],
            [
              "red",
              "green",
              "blue"
            ],
            [
              1,
              2,
              3,
              4,
              5
            ]
          ]
        },
        "example": {
          "description": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind of data is expected. They are commonly used by documentation generators and API testing tools.",
          "markdownDescription": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind\nof data is expected. They are commonly used by documentation generators\nand API testing tools.",
          "examples": [
            {
              "name": "Puma",
              "id": 1
            },
            "example string value",
            42,
            [
              "item1",
              "item2"
            ]
          ]
        },
        "multipleOf": {
          "type": "number",
          "description": "A number is valid against \"multipleOf\" if the result of the division of the instance by this keyword's value is an integer.",
          "markdownDescription": "A number is valid against \"multipleOf\" if the result of the division\nof the instance by this keyword's value is an integer.",
          "examples": [
            2,
            1
          ]
        },
        "maximum": {
          "type": "number",
          "description": "A number is valid against \"maximum\" if it is less than or equal to this value.",
          "markdownDescription": "A number is valid against \"maximum\" if it is less than or equal to this value.",
          "examples": [
            100,
            2147483647
          ]
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "description": "A number is valid against \"exclusiveMaximum\" if it is strictly less than this value.",
          "markdownDescription": "A number is valid against \"exclusiveMaximum\" if it is strictly less than this value.",
          "examples": [
            false,
            true
          ]
        },
        "minimum": {
          "type": "number",
          "description": "A number is valid against \"minimum\" if it is greater than or equal to this value.",
          "markdownDescription": "A number is valid against \"minimum\" if it is greater than or equal to this value.",
          "examples": [
            0,
            1
          ]
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "description": "A number is valid against \"exclusiveMinimum\" if it is strictly greater than this value.",
          "markdownDescription": "A number is valid against \"exclusiveMinimum\" if it is strictly greater than this value.",
          "examples": [
            false,
            true
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "userId",
              "attribute": false
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "----- Integer Schema\n-----\n\nSchema for integer data types in Swagger 2.0.\n\nInteger schemas represent whole numbers without fractional components. They support various formats and validation rules to ensure data integrity and provide meaningful constraints for integer values.\n\nInteger schemas are commonly used for counts, IDs, timestamps, and other discrete numeric values in APIs. They support range validation and multiple format specifications including int32 and int64.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nInteger Schema\n-----\n\nSchema for integer data types in Swagger 2.0.\n\nInteger schemas represent whole numbers without fractional components.\nThey support various formats and validation rules to ensure data integrity\nand provide meaningful constraints for integer values.\n\nInteger schemas are commonly used for counts, IDs, timestamps, and other\ndiscrete numeric values in APIs. They support range validation and multiple\nformat specifications including int32 and int64.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n-----\nFields\n-----"
    },
    "BooleanSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "boolean",
          "description": "The type of the schema. Must be \"boolean\" for boolean schemas.\n\nThis property is required and must be set to \"boolean\" to indicate that this schema represents true/false values.",
          "markdownDescription": "The type of the schema. Must be \"boolean\" for boolean schemas.\n\nThis property is required and must be set to \"boolean\" to indicate\nthat this schema represents true/false values.",
          "examples": [
            "boolean"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type, enabling more precise validation and better tooling support. Swagger 2.0 defines several standard formats, but custom formats are also allowed.",
          "markdownDescription": "The extending format for the previously mentioned type.\nSee Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type,\nenabling more precise validation and better tooling support. Swagger 2.0\ndefines several standard formats, but custom formats are also allowed.",
          "examples": [
            "int32",
            "date",
            "email",
            "uuid"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema represents and how it should be used. It's commonly displayed in API documentation and code generation tools.",
          "markdownDescription": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema\nrepresents and how it should be used. It's commonly displayed in API\ndocumentation and code generation tools.",
          "examples": [
            "A user object containing basic information",
            "Email address in RFC 5322 format"
          ]
        },
        "title": {
          "type": "string",
          "description": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used in documentation and UI displays. It should be concise but descriptive.",
          "markdownDescription": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used\nin documentation and UI displays. It should be concise but descriptive.",
          "examples": [
            "User",
            "Pet",
            "Order"
          ]
        },
        "default": {
          "description": "Declares the value of the schema that the server will use if none is provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema. The default value must be valid according to the schema's type and constraints.",
          "markdownDescription": "Declares the value of the schema that the server will use if none is provided.\nUnlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema.\nThe default value must be valid according to the schema's type and constraints.",
          "examples": [
            "defaultValue",
            10,
            {
              "name": "John",
              "age": 30
            },
            [
              "item1",
              "item2"
            ]
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "markdownDescription": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ],
            [
              "red",
              "green",
              "blue"
            ],
            [
              1,
              2,
              3,
              4,
              5
            ]
          ]
        },
        "example": {
          "description": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind of data is expected. They are commonly used by documentation generators and API testing tools.",
          "markdownDescription": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind\nof data is expected. They are commonly used by documentation generators\nand API testing tools.",
          "examples": [
            {
              "name": "Puma",
              "id": 1
            },
            "example string value",
            42,
            [
              "item1",
              "item2"
            ]
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "isActive",
              "attribute": false
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "----- Boolean Schema\n-----\n\nSchema for boolean data types in Swagger 2.0.\n\nBoolean schemas represent true/false values and are used for flags, switches, and other binary state indicators in APIs. They are simple but essential data types that provide clear semantic meaning for binary choices.\n\nBoolean schemas are commonly used for feature flags, status indicators, configuration options, and other binary state representations. They support default values and examples to help API consumers understand the expected behavior.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nBoolean Schema\n-----\n\nSchema for boolean data types in Swagger 2.0.\n\nBoolean schemas represent true/false values and are used for flags, switches,\nand other binary state indicators in APIs. They are simple but essential\ndata types that provide clear semantic meaning for binary choices.\n\nBoolean schemas are commonly used for feature flags, status indicators,\nconfiguration options, and other binary state representations. They support\ndefault values and examples to help API consumers understand the expected\nbehavior.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n-----\nFields\n-----"
    },
    "FileSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "file",
          "description": "The type of the schema. Must be \"file\" for file schemas.\n\nThis property is required and must be set to \"file\" to indicate that this schema represents file data. This is a Swagger 2.0 specific type that extends JSON Schema.",
          "markdownDescription": "The type of the schema. Must be \"file\" for file schemas.\n\nThis property is required and must be set to \"file\" to indicate\nthat this schema represents file data. This is a Swagger 2.0 specific\ntype that extends JSON Schema.",
          "examples": [
            "file"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type, enabling more precise validation and better tooling support. Swagger 2.0 defines several standard formats, but custom formats are also allowed.",
          "markdownDescription": "The extending format for the previously mentioned type.\nSee Swagger 2.0 Data Type Formats for further details.\n\nFormats provide additional semantic information about the data type,\nenabling more precise validation and better tooling support. Swagger 2.0\ndefines several standard formats, but custom formats are also allowed.",
          "examples": [
            "int32",
            "date",
            "email",
            "uuid"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema represents and how it should be used. It's commonly displayed in API documentation and code generation tools.",
          "markdownDescription": "A short description of the schema. GFM syntax can be used for rich text representation.\n\nThis description should provide clear information about what the schema\nrepresents and how it should be used. It's commonly displayed in API\ndocumentation and code generation tools.",
          "examples": [
            "A user object containing basic information",
            "Email address in RFC 5322 format"
          ]
        },
        "title": {
          "type": "string",
          "description": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used in documentation and UI displays. It should be concise but descriptive.",
          "markdownDescription": "A short title for the schema.\n\nThe title provides a human-readable name for the schema, often used\nin documentation and UI displays. It should be concise but descriptive.",
          "examples": [
            "User",
            "Pet",
            "Order"
          ]
        },
        "default": {
          "description": "Declares the value of the schema that the server will use if none is provided. Unlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema. The default value must be valid according to the schema's type and constraints.",
          "markdownDescription": "Declares the value of the schema that the server will use if none is provided.\nUnlike JSON Schema, the value MUST conform to the defined type for the Schema Object.\n\nThis is a Swagger 2.0 specific requirement that differs from JSON Schema.\nThe default value must be valid according to the schema's type and constraints.",
          "examples": [
            "defaultValue",
            10,
            {
              "name": "John",
              "age": 30
            },
            [
              "item1",
              "item2"
            ]
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "markdownDescription": "An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword's array value.",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ],
            [
              "red",
              "green",
              "blue"
            ],
            [
              1,
              2,
              3,
              4,
              5
            ]
          ]
        },
        "example": {
          "description": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind of data is expected. They are commonly used by documentation generators and API testing tools.",
          "markdownDescription": "A free-form property to include an example of an instance for this schema.\n\nExamples help developers understand how to use the schema and what kind\nof data is expected. They are commonly used by documentation generators\nand API testing tools.",
          "examples": [
            {
              "name": "Puma",
              "id": 1
            },
            "example string value",
            42,
            [
              "item1",
              "item2"
            ]
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "fileData",
              "attribute": false
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "----- File Schema\n-----\n\nSchema for file data types in Swagger 2.0.\n\nFile schemas represent file uploads and downloads in APIs. This is a Swagger 2.0 specific data type that extends the JSON Schema specification to support file operations. File schemas are used by Parameter and Response objects to indicate that the data represents a file rather than a structured data type.\n\nFile schemas are commonly used for file upload endpoints, document processing, image handling, and other file-based operations. They provide clear indication to API consumers that file data is expected or returned.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#parameter-object Swagger 2.0 Parameter Object }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#response-object Swagger 2.0 Response Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nFile Schema\n-----\n\nSchema for file data types in Swagger 2.0.\n\nFile schemas represent file uploads and downloads in APIs. This is a Swagger 2.0\nspecific data type that extends the JSON Schema specification to support file\noperations. File schemas are used by Parameter and Response objects to indicate\nthat the data represents a file rather than a structured data type.\n\nFile schemas are commonly used for file upload endpoints, document processing,\nimage handling, and other file-based operations. They provide clear indication\nto API consumers that file data is expected or returned.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#parameter-object Swagger 2.0 Parameter Object }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#response-object Swagger 2.0 Response Object }  |\n\n-----\nFields\n-----"
    },
    "ArraySchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "array",
          "description": "The type of the schema. Must be \"array\" for array schemas.\n\nThis property is required and must be set to \"array\" to indicate that this schema represents an ordered collection of items.",
          "markdownDescription": "The type of the schema. Must be \"array\" for array schemas.\n\nThis property is required and must be set to \"array\" to indicate\nthat this schema represents an ordered collection of items.",
          "examples": [
            "array"
          ]
        },
        "items": {
          "$ref": "#/definitions/Schema",
          "description": "Required if type is \"array\". Describes the type of items in the array.\n\nThe definition is the same as the one from JSON Schema, but references the Swagger Schema Object definition instead. This allows for complex nested structures and references to other schema definitions.",
          "markdownDescription": "Required if type is \"array\". Describes the type of items in the array.\n\nThe definition is the same as the one from JSON Schema, but references\nthe Swagger Schema Object definition instead. This allows for complex\nnested structures and references to other schema definitions.",
          "examples": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/User"
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "maxItems": {
          "type": "number",
          "description": "An array is valid against \"maxItems\" if its length is less than or equal to this value.",
          "markdownDescription": "An array is valid against \"maxItems\" if its length is less than or equal to this value.",
          "examples": [
            10,
            100
          ]
        },
        "minItems": {
          "type": "number",
          "description": "An array is valid against \"minItems\" if its length is greater than or equal to this value.",
          "markdownDescription": "An array is valid against \"minItems\" if its length is greater than or equal to this value.",
          "examples": [
            1,
            2
          ]
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "An array is valid against \"uniqueItems\" if all its elements are unique.",
          "markdownDescription": "An array is valid against \"uniqueItems\" if all its elements are unique.",
          "examples": [
            true,
            false
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "users",
              "wrapped": true
            }
          ]
        }
      },
      "required": [
        "type",
        "items"
      ],
      "description": "----- Array Schema\n-----\n\nSchema for array data types in Swagger 2.0.\n\nArray schemas represent ordered collections of items, where each item conforms to a specified schema. They are based on JSON Schema Draft 4 with Swagger-specific adjustments, providing comprehensive validation for array data structures.\n\nArray schemas are commonly used for lists, collections, and ordered data in APIs. They support validation of array length, item uniqueness, and item type constraints. The items property defines the schema that each array element must conform to.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nArray Schema\n-----\n\nSchema for array data types in Swagger 2.0.\n\nArray schemas represent ordered collections of items, where each item conforms\nto a specified schema. They are based on JSON Schema Draft 4 with Swagger-specific\nadjustments, providing comprehensive validation for array data structures.\n\nArray schemas are commonly used for lists, collections, and ordered data in APIs.\nThey support validation of array length, item uniqueness, and item type constraints.\nThe items property defines the schema that each array element must conform to.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n-----\nFields\n-----"
    },
    "ObjectSchema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "object",
          "description": "The type of the schema. Must be \"object\" for object schemas.\n\nThis property is required and must be set to \"object\" to indicate that this schema represents structured data with named properties.",
          "markdownDescription": "The type of the schema. Must be \"object\" for object schemas.\n\nThis property is required and must be set to \"object\" to indicate\nthat this schema represents structured data with named properties.",
          "examples": [
            "object"
          ]
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Schema"
          },
          "description": "The properties of the object. The definition is the same as the one from JSON Schema, but references the Swagger Schema Object definition instead.\n\nEach property name maps to a schema definition that describes the type and validation rules for that property. Properties can be of any type supported by Swagger schemas, including primitives, objects, arrays, and references.",
          "markdownDescription": "The properties of the object. The definition is the same as the one from\nJSON Schema, but references the Swagger Schema Object definition instead.\n\nEach property name maps to a schema definition that describes the type\nand validation rules for that property. Properties can be of any type\nsupported by Swagger schemas, including primitives, objects, arrays,\nand references.",
          "examples": [
            {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "integer"
              }
            },
            {
              "address": {
                "$ref": "#/definitions/Address"
              }
            }
          ]
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of required properties. Properties marked as required being true MUST be present in the object.\n\nThis array contains the names of properties that must be present in any valid instance of this object schema. Properties not listed here are considered optional.",
          "markdownDescription": "A list of required properties. Properties marked as required being true\nMUST be present in the object.\n\nThis array contains the names of properties that must be present in\nany valid instance of this object schema. Properties not listed here\nare considered optional.",
          "examples": [
            [
              "name",
              "email"
            ],
            [
              "id",
              "type",
              "createdAt"
            ]
          ]
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/Schema"
            }
          ],
          "description": "Additional properties for the object. Can be a boolean or a schema. The definition is the same as the one from JSON Schema, but references the Swagger Schema Object definition instead.\n\n- If true, additional properties of any type are allowed\n- If false, no additional properties are allowed\n- If a schema, additional properties must conform to that schema",
          "markdownDescription": "Additional properties for the object. Can be a boolean or a schema.\nThe definition is the same as the one from JSON Schema, but references\nthe Swagger Schema Object definition instead.\n\n- If true, additional properties of any type are allowed\n- If false, no additional properties are allowed\n- If a schema, additional properties must conform to that schema",
          "examples": [
            true,
            false,
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/AdditionalProperty"
            }
          ]
        },
        "allOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schema"
          },
          "description": "An array of schemas that this schema must validate against. All schemas in the array must be valid for the object to be valid. The definition is the same as the one from JSON Schema, but references the Swagger Schema Object definition instead.\n\nThis enables schema composition and inheritance patterns, allowing objects to extend or combine multiple base schemas.",
          "markdownDescription": "An array of schemas that this schema must validate against.\nAll schemas in the array must be valid for the object to be valid.\nThe definition is the same as the one from JSON Schema, but references\nthe Swagger Schema Object definition instead.\n\nThis enables schema composition and inheritance patterns, allowing\nobjects to extend or combine multiple base schemas.",
          "examples": [
            [
              {
                "$ref": "#/definitions/Identifiable"
              },
              {
                "$ref": "#/definitions/Timestamped"
              }
            ]
          ]
        },
        "maxProperties": {
          "type": "number",
          "description": "An object is valid against \"maxProperties\" if its number of properties is less than or equal to this value.",
          "markdownDescription": "An object is valid against \"maxProperties\" if its number of properties is less than or equal to this value.",
          "examples": [
            10,
            50
          ]
        },
        "minProperties": {
          "type": "number",
          "description": "An object is valid against \"minProperties\" if its number of properties is greater than or equal to this value.",
          "markdownDescription": "An object is valid against \"minProperties\" if its number of properties is greater than or equal to this value.",
          "examples": [
            1,
            2
          ]
        },
        "xml": {
          "$ref": "#/definitions/XMLObject",
          "description": "XML representation metadata for the schema. Allows for fine-tuned XML model definitions.",
          "markdownDescription": "XML representation metadata for the schema.\nAllows for fine-tuned XML model definitions.",
          "examples": [
            {
              "name": "user",
              "attribute": false
            }
          ]
        }
      },
      "description": "----- Object Schema\n-----\n\nSchema for object data types in Swagger 2.0.\n\nObject schemas represent structured data with named properties, where each property has its own schema definition. They are based on JSON Schema Draft 4 with Swagger-specific adjustments, providing comprehensive validation for complex data structures.\n\nObject schemas are commonly used for models, entities, and complex data structures in APIs. They support property definitions, required fields, additional properties, and composition through allOf. The properties reference Swagger Schema Objects instead of JSON Schema definitions.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  | | 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nObject Schema\n-----\n\nSchema for object data types in Swagger 2.0.\n\nObject schemas represent structured data with named properties, where each\nproperty has its own schema definition. They are based on JSON Schema Draft 4\nwith Swagger-specific adjustments, providing comprehensive validation for\ncomplex data structures.\n\nObject schemas are commonly used for models, entities, and complex data\nstructures in APIs. They support property definitions, required fields,\nadditional properties, and composition through allOf. The properties\nreference Swagger Schema Objects instead of JSON Schema definitions.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#data-types Swagger 2.0 Data Types }  |\n| 2.0     |  {@link  https://swagger.io/specification/v2/#schema-object Swagger 2.0 Schema Object }  |\n\n-----\nFields\n-----"
    },
    "BaseReference": {
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string",
          "description": "The reference string. This field is required.\n\nThe reference string follows JSON Pointer syntax and can reference:\n- Definitions within the same document using \"#/definitions/Name\"\n- Parameters within the same document using \"#/parameters/Name\"\n- Responses within the same document using \"#/responses/Name\"\n- External files using relative or absolute URLs\n- Specific parts of external files using fragment identifiers",
          "markdownDescription": "The reference string. This field is required.\n\nThe reference string follows JSON Pointer syntax and can reference:\n- Definitions within the same document using \"#/definitions/Name\"\n- Parameters within the same document using \"#/parameters/Name\"\n- Responses within the same document using \"#/responses/Name\"\n- External files using relative or absolute URLs\n- Specific parts of external files using fragment identifiers",
          "examples": [
            "#/definitions/Pet",
            "#/parameters/skipParam",
            "#/responses/NotFound",
            "Pet.json",
            "definitions.json#/Pet",
            "https://api.example.com/schemas/User.json"
          ]
        }
      },
      "required": [
        "$ref"
      ],
      "additionalProperties": false,
      "description": "----- JSON Reference Object\n-----\n\nA simple object to allow referencing other definitions in the specification. It can be used to reference parameters and responses that are defined at the top level for reuse. The Reference Object is a JSON Reference that uses a JSON Pointer as its value. For this specification, only canonical dereferencing is supported.\n\nJSON References enable reusability and modularity in API specifications by allowing the same definition to be referenced multiple times throughout the document. This reduces duplication and makes specifications easier to maintain.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#reference-object Swagger 2.0 Reference Object }  | | 2.0     |  {@link  https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-02 JSON Reference Specification }  | | 2.0     |  {@link  https://tools.ietf.org/html/rfc6901 JSON Pointer Specification }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nJSON Reference Object\n-----\n\nA simple object to allow referencing other definitions in the specification.\nIt can be used to reference parameters and responses that are defined at the\ntop level for reuse. The Reference Object is a JSON Reference that uses a\nJSON Pointer as its value. For this specification, only canonical dereferencing\nis supported.\n\nJSON References enable reusability and modularity in API specifications by\nallowing the same definition to be referenced multiple times throughout the\ndocument. This reduces duplication and makes specifications easier to maintain.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#reference-object Swagger 2.0 Reference Object }  |\n| 2.0     |  {@link  https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-02 JSON Reference Specification }  |\n| 2.0     |  {@link  https://tools.ietf.org/html/rfc6901 JSON Pointer Specification }  |\n\n-----\nFields\n-----"
    },
    "NonBodyParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter. Parameter names are case sensitive.\n- If in is \"path\", the name field MUST correspond to the associated path segment from the path field in the Paths Object\n- For all other cases, the name corresponds to the parameter name used by the in property",
          "markdownDescription": "The name of the parameter. Parameter names are case sensitive.\n- If in is \"path\", the name field MUST correspond to the associated path segment from the path field in the Paths Object\n- For all other cases, the name corresponds to the parameter name used by the in property",
          "examples": [
            "id",
            "limit",
            "user"
          ]
        },
        "in": {
          "type": "string",
          "enum": [
            "query",
            "header",
            "path",
            "formData"
          ],
          "description": "The location of the parameter. Possible values are \"query\", \"header\", \"path\", or \"formData\".\n\n- **query**: Parameters that are appended to the URL. For example, in `/users?role=admin`, the role query parameter has the value admin.\n- **header**: Custom headers that are expected as part of the request. Note that RFC7230 states header names are case insensitive.\n- **path**: Used together with Path Templating, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API.\n- **formData**: Used to describe the payload of an HTTP request when either application/x-www-form-urlencoded or multipart/form-data is used as the content type of the request.",
          "markdownDescription": "The location of the parameter. Possible values are \"query\", \"header\", \"path\", or \"formData\".\n\n- **query**: Parameters that are appended to the URL. For example, in `/users?role=admin`, the role query parameter has the value admin.\n- **header**: Custom headers that are expected as part of the request. Note that RFC7230 states header names are case insensitive.\n- **path**: Used together with Path Templating, where the parameter value is actually part of the operation's URL. This does not include the host or base path of the API.\n- **formData**: Used to describe the payload of an HTTP request when either application/x-www-form-urlencoded or multipart/form-data is used as the content type of the request.",
          "examples": [
            "query",
            "path",
            "header",
            "formData"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use. GFM syntax can be used for rich text representation.",
          "markdownDescription": "A brief description of the parameter. This could contain examples of use.\nGFM syntax can be used for rich text representation.",
          "examples": [
            "The user ID",
            "Maximum number of items to return (default: 10)"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Determines whether this parameter is mandatory. If the parameter is in \"path\", this property is required and its value MUST be true. Otherwise, the property MAY be included and its default value is false.",
          "markdownDescription": "Determines whether this parameter is mandatory. If the parameter is in \"path\",\nthis property is required and its value MUST be true. Otherwise, the property\nMAY be included and its default value is false.",
          "examples": [
            true
          ],
          "default": false
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array",
            "file"
          ],
          "description": "The type of the parameter. Since the parameter is not located at the request body, it is limited to simple types (that is, not an object). The value MUST be one of \"string\", \"number\", \"integer\", \"boolean\", \"array\" or \"file\". If type is \"file\", the consumes MUST be either \"multipart/form-data\", \"application/x-www-form-urlencoded\" or both and the parameter MUST be in \"formData\".",
          "markdownDescription": "The type of the parameter. Since the parameter is not located at the request body,\nit is limited to simple types (that is, not an object). The value MUST be one of\n\"string\", \"number\", \"integer\", \"boolean\", \"array\" or \"file\". If type is \"file\",\nthe consumes MUST be either \"multipart/form-data\", \"application/x-www-form-urlencoded\"\nor both and the parameter MUST be in \"formData\".",
          "examples": [
            "string",
            "integer",
            "array",
            "file"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Data Type Formats for further details.",
          "markdownDescription": "The extending format for the previously mentioned type. See Data Type Formats\nfor further details.",
          "examples": [
            "int32",
            "date",
            "email"
          ]
        },
        "allowEmptyValue": {
          "type": "boolean",
          "description": "Sets the ability to pass empty-valued parameters. This is valid only for either query or formData parameters and allows you to send a parameter with a name only or an empty value. Default value is false.",
          "markdownDescription": "Sets the ability to pass empty-valued parameters. This is valid only for either\nquery or formData parameters and allows you to send a parameter with a name only\nor an empty value. Default value is false.",
          "examples": [
            true
          ],
          "default": false
        },
        "items": {
          "$ref": "#/definitions/Items",
          "description": "Required if type is \"array\". Describes the type of items in the array.",
          "markdownDescription": "Required if type is \"array\". Describes the type of items in the array.",
          "examples": [
            {
              "type": "string"
            },
            {
              "type": "integer",
              "format": "int32"
            }
          ]
        },
        "collectionFormat": {
          "type": "string",
          "enum": [
            "csv",
            "ssv",
            "tsv",
            "pipes",
            "multi"
          ],
          "description": "Determines the format of the array if type array is used. Possible values are:\n- csv: comma separated values foo,bar\n- ssv: space separated values foo bar\n- tsv: tab separated values foo\\tbar\n- pipes: pipe separated values foo|bar\n- multi: corresponds to multiple parameter instances instead of multiple values for a single instance foo=bar&foo=baz",
          "markdownDescription": "Determines the format of the array if type array is used. Possible values are:\n- csv: comma separated values foo,bar\n- ssv: space separated values foo bar\n- tsv: tab separated values foo\\tbar\n- pipes: pipe separated values foo|bar\n- multi: corresponds to multiple parameter instances instead of multiple values for a single instance foo=bar&foo=baz",
          "examples": [
            "multi"
          ],
          "default": "csv"
        },
        "default": {
          "description": "Declares the value of the parameter that the server will use if none is provided. This value MUST conform to the defined type for this parameter.",
          "markdownDescription": "Declares the value of the parameter that the server will use if none is provided.\nThis value MUST conform to the defined type for this parameter.",
          "examples": [
            "defaultValue",
            10
          ]
        },
        "maximum": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "examples": [
            100
          ]
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "examples": [
            false
          ]
        },
        "minimum": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "examples": [
            0
          ]
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "examples": [
            false
          ]
        },
        "maxLength": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1",
          "examples": [
            100
          ]
        },
        "minLength": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2",
          "examples": [
            1
          ]
        },
        "pattern": {
          "type": "string",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3",
          "examples": [
            "^[a-zA-Z0-9]+$"
          ]
        },
        "maxItems": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2",
          "examples": [
            10
          ]
        },
        "minItems": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3",
          "examples": [
            1
          ]
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4",
          "examples": [
            true
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ]
          ]
        },
        "multipleOf": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1",
          "examples": [
            2
          ]
        }
      },
      "required": [
        "name",
        "in",
        "type"
      ],
      "description": "----- Parameter Object (Non-Body Parameter)\n-----\n\nDescribes a non-body parameter for an API operation. These parameters include query, header, path, and formData parameters. They have different validation rules and properties compared to body parameters.\n\nNon-body parameters support simple types (string, number, integer, boolean, array, file) and include validation properties like format, pattern, minimum, maximum, etc.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#parameter-object Swagger 2.0 Parameter Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nParameter Object (Non-Body Parameter)\n-----\n\nDescribes a non-body parameter for an API operation. These parameters include\nquery, header, path, and formData parameters. They have different validation\nrules and properties compared to body parameters.\n\nNon-body parameters support simple types (string, number, integer, boolean, array, file)\nand include validation properties like format, pattern, minimum, maximum, etc.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#parameter-object Swagger 2.0 Parameter Object }  |\n\n-----\nFields\n-----"
    },
    "Items": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The internal type of the array. The value MUST be one of \"string\", \"number\", \"integer\", \"boolean\", or \"array\". Files and models are not allowed.",
          "markdownDescription": "The internal type of the array. The value MUST be one of \"string\", \"number\",\n\"integer\", \"boolean\", or \"array\". Files and models are not allowed.",
          "examples": [
            "string",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Data Type Formats for further details.",
          "markdownDescription": "The extending format for the previously mentioned type. See Data Type Formats\nfor further details.",
          "examples": [
            "int32",
            "date",
            "email"
          ]
        },
        "items": {
          "$ref": "#/definitions/Items",
          "description": "Required if type is \"array\". Describes the type of items in the array.",
          "markdownDescription": "Required if type is \"array\". Describes the type of items in the array.",
          "examples": [
            {
              "type": "string"
            },
            {
              "type": "integer",
              "format": "int32"
            }
          ]
        },
        "collectionFormat": {
          "type": "string",
          "enum": [
            "csv",
            "ssv",
            "tsv",
            "pipes"
          ],
          "description": "Determines the format of the array if type array is used. Possible values are:\n- csv: comma separated values foo,bar\n- ssv: space separated values foo bar\n- tsv: tab separated values foo\\tbar\n- pipes: pipe separated values foo|bar",
          "markdownDescription": "Determines the format of the array if type array is used. Possible values are:\n- csv: comma separated values foo,bar\n- ssv: space separated values foo bar\n- tsv: tab separated values foo\\tbar\n- pipes: pipe separated values foo|bar",
          "examples": [
            "multi"
          ],
          "default": "csv"
        },
        "default": {
          "description": "Declares the value of the item that the server will use if none is provided. This value MUST conform to the defined type for the data type.",
          "markdownDescription": "Declares the value of the item that the server will use if none is provided.\nThis value MUST conform to the defined type for the data type.",
          "examples": [
            "defaultValue",
            10
          ]
        },
        "maximum": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "examples": [
            100
          ]
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "examples": [
            false
          ]
        },
        "minimum": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "examples": [
            0
          ]
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "examples": [
            false
          ]
        },
        "maxLength": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1",
          "examples": [
            100
          ]
        },
        "minLength": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2",
          "examples": [
            1
          ]
        },
        "pattern": {
          "type": "string",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3",
          "examples": [
            "^[a-zA-Z0-9]+$"
          ]
        },
        "maxItems": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2",
          "examples": [
            10
          ]
        },
        "minItems": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3",
          "examples": [
            1
          ]
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4",
          "examples": [
            true
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ]
          ]
        },
        "multipleOf": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1",
          "examples": [
            2
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "Items Object\n\nA limited subset of JSON-Schema's items object. It is used by parameter definitions that are not located in \"body\".",
      "markdownDescription": "Items Object\n\nA limited subset of JSON-Schema's items object. It is used by parameter definitions\nthat are not located in \"body\"."
    },
    "ResponsesMap": {
      "type": "object",
      "properties": {
        "100": {
          "$ref": "#/definitions/Response",
          "description": "100 Continue\n\nIndicates that the initial part of the request has been received and the client should continue with the request.\n\nThe server has received the request headers and the client should proceed to send the request body.\n\nUsed in scenarios where the client needs to send a large request body and wants to confirm the server is ready to receive it before sending the data. Commonly used with `Expect: 100-continue` header for file uploads, API requests with large payloads, or when implementing optimistic request patterns.\n\nThe server is ready to process the request and the client can proceed with sending the request body. This prevents unnecessary data transmission if the server would reject the request based on headers alone.",
          "markdownDescription": "100 Continue\n\nIndicates that the initial part of the request has been received and the client should continue with the request.\n\nThe server has received the request headers and the client should proceed to send the request body.\n\nUsed in scenarios where the client needs to send a large request body and wants to confirm the server is ready to receive it before sending the data. Commonly used with `Expect: 100-continue` header for file uploads, API requests with large payloads, or when implementing optimistic request patterns.\n\nThe server is ready to process the request and the client can proceed with sending the request body. This prevents unnecessary data transmission if the server would reject the request based on headers alone."
        },
        "101": {
          "$ref": "#/definitions/Response",
          "description": "101 Switching Protocols\n\nIndicates that the server is switching protocols as requested by the client.\n\nThe server agrees to change the application protocol within the current connection, typically from HTTP to WebSocket or other protocols.\n\nPrimarily used for WebSocket connections where the client sends an `Upgrade: websocket` header and the server responds with 101 to establish the WebSocket connection. Also used for HTTP/2 upgrades, Server-Sent Events (SSE), or other protocol switching scenarios.\n\nThe connection will continue using a different protocol. The response headers will contain the new protocol information, and subsequent communication will use the upgraded protocol.",
          "markdownDescription": "101 Switching Protocols\n\nIndicates that the server is switching protocols as requested by the client.\n\nThe server agrees to change the application protocol within the current connection, typically from HTTP to WebSocket or other protocols.\n\nPrimarily used for WebSocket connections where the client sends an `Upgrade: websocket` header and the server responds with 101 to establish the WebSocket connection. Also used for HTTP/2 upgrades, Server-Sent Events (SSE), or other protocol switching scenarios.\n\nThe connection will continue using a different protocol. The response headers will contain the new protocol information, and subsequent communication will use the upgraded protocol."
        },
        "102": {
          "$ref": "#/definitions/Response",
          "description": "102 Processing\n\nIndicates that the server has received and is processing the request, but no response is available yet.\n\nThe server has accepted the request and is processing it, but the processing is taking longer than normal and the client should continue waiting.\n\nPrimarily used in WebDAV (Web Distributed Authoring and Versioning) environments for long-running operations like file uploads, batch operations, or complex data processing. Helps prevent client timeouts during extended processing periods.\n\nThe request is being processed and the client should continue waiting. This prevents timeout issues during long-running operations and provides feedback that the server is actively working on the request.",
          "markdownDescription": "102 Processing\n\nIndicates that the server has received and is processing the request, but no response is available yet.\n\nThe server has accepted the request and is processing it, but the processing is taking longer than normal and the client should continue waiting.\n\nPrimarily used in WebDAV (Web Distributed Authoring and Versioning) environments for long-running operations like file uploads, batch operations, or complex data processing. Helps prevent client timeouts during extended processing periods.\n\nThe request is being processed and the client should continue waiting. This prevents timeout issues during long-running operations and provides feedback that the server is actively working on the request."
        },
        "103": {
          "$ref": "#/definitions/Response",
          "description": "103 Early Hints\n\nProvides early hints about the response that will be sent, allowing the client to start processing before the full response is ready.\n\nThe server is sending preliminary information about the response headers and resources that will be needed, enabling the client to start optimization processes early.\n\nUsed for performance optimization, particularly in web applications where the server can hint about resources (CSS, JavaScript, fonts) that will be needed for the final response. Allows browsers to start preloading resources before the main response is ready, significantly improving perceived performance.\n\nThe client can start preparing for the response based on the hints provided. This is especially valuable for web applications where resource preloading can improve user experience.",
          "markdownDescription": "103 Early Hints\n\nProvides early hints about the response that will be sent, allowing the client to start processing before the full response is ready.\n\nThe server is sending preliminary information about the response headers and resources that will be needed, enabling the client to start optimization processes early.\n\nUsed for performance optimization, particularly in web applications where the server can hint about resources (CSS, JavaScript, fonts) that will be needed for the final response. Allows browsers to start preloading resources before the main response is ready, significantly improving perceived performance.\n\nThe client can start preparing for the response based on the hints provided. This is especially valuable for web applications where resource preloading can improve user experience."
        },
        "104": {
          "$ref": "#/definitions/Response",
          "description": "104 Upload Resumption Supported — TEMPORARY\n\nIndicates that the server supports resumable uploads for the requested resource.\n\nThe server is indicating that it can handle interrupted uploads and allows the client to resume uploading from where it left off.\n\nUsed in file upload scenarios where large files might be interrupted due to network issues, browser crashes, or other problems. Enables clients to resume uploads without starting over, improving reliability for large file transfers and reducing bandwidth waste.\n\nThe client can implement resumable upload logic, typically using range requests or specialized upload protocols. This is particularly valuable for mobile applications and unreliable network conditions.",
          "markdownDescription": "104 Upload Resumption Supported — TEMPORARY\n\nIndicates that the server supports resumable uploads for the requested resource.\n\nThe server is indicating that it can handle interrupted uploads and allows the client to resume uploading from where it left off.\n\nUsed in file upload scenarios where large files might be interrupted due to network issues, browser crashes, or other problems. Enables clients to resume uploads without starting over, improving reliability for large file transfers and reducing bandwidth waste.\n\nThe client can implement resumable upload logic, typically using range requests or specialized upload protocols. This is particularly valuable for mobile applications and unreliable network conditions."
        },
        "200": {
          "$ref": "#/definitions/Response",
          "description": "200 OK\n\nIndicates that the request has succeeded and the response contains the requested data.\n\nThe request was processed successfully and the response body contains the requested resource or data.\n\nThe most common success response for GET requests, API endpoints that return data, and successful operations. Used for retrieving resources, executing queries, and any operation that completes successfully with data to return.\n\nThe operation completed successfully and the response body contains the requested information. This is the standard success response for most API operations.",
          "markdownDescription": "200 OK\n\nIndicates that the request has succeeded and the response contains the requested data.\n\nThe request was processed successfully and the response body contains the requested resource or data.\n\nThe most common success response for GET requests, API endpoints that return data, and successful operations. Used for retrieving resources, executing queries, and any operation that completes successfully with data to return.\n\nThe operation completed successfully and the response body contains the requested information. This is the standard success response for most API operations."
        },
        "201": {
          "$ref": "#/definitions/Response",
          "description": "201 Created\n\nIndicates that the request has succeeded and a new resource has been created as a result.\n\nThe request was processed successfully and resulted in the creation of a new resource. The response typically includes the location of the newly created resource.\n\nUsed for POST requests that create new resources (users, posts, files, etc.). The response should include a `Location` header pointing to the newly created resource. Common in REST APIs for resource creation operations.\n\nA new resource was successfully created and the response contains information about the created resource, typically including its ID and location.",
          "markdownDescription": "201 Created\n\nIndicates that the request has succeeded and a new resource has been created as a result.\n\nThe request was processed successfully and resulted in the creation of a new resource. The response typically includes the location of the newly created resource.\n\nUsed for POST requests that create new resources (users, posts, files, etc.). The response should include a `Location` header pointing to the newly created resource. Common in REST APIs for resource creation operations.\n\nA new resource was successfully created and the response contains information about the created resource, typically including its ID and location."
        },
        "202": {
          "$ref": "#/definitions/Response",
          "description": "202 Accepted\n\nIndicates that the request has been accepted for processing, but the processing has not been completed.\n\nThe request was valid and accepted, but the server will process it asynchronously. The processing may or may not eventually succeed.\n\nUsed for asynchronous operations like background jobs, batch processing, email sending, or any operation that takes time to complete. The client should not assume the operation succeeded based on this response alone.\n\nThe request was accepted and is being processed asynchronously. The client should check the status separately or wait for a callback/webhook to know the final result.",
          "markdownDescription": "202 Accepted\n\nIndicates that the request has been accepted for processing, but the processing has not been completed.\n\nThe request was valid and accepted, but the server will process it asynchronously. The processing may or may not eventually succeed.\n\nUsed for asynchronous operations like background jobs, batch processing, email sending, or any operation that takes time to complete. The client should not assume the operation succeeded based on this response alone.\n\nThe request was accepted and is being processed asynchronously. The client should check the status separately or wait for a callback/webhook to know the final result."
        },
        "203": {
          "$ref": "#/definitions/Response",
          "description": "203 Non-Authoritative Information\n\nIndicates that the request was successful, but the information returned is from a transformed or cached version of the original resource.\n\nThe response is successful but the data may have been modified by a transforming proxy or cache, and may not be the authoritative version.\n\nUsed when responses come from caches, proxies, or transformation services where the data might be slightly different from the original. Common in CDN scenarios or when data is processed through middleware.\n\nThe request succeeded but the response data may not be the most current or authoritative version. The client should be aware that the data might be cached or transformed.",
          "markdownDescription": "203 Non-Authoritative Information\n\nIndicates that the request was successful, but the information returned is from a transformed or cached version of the original resource.\n\nThe response is successful but the data may have been modified by a transforming proxy or cache, and may not be the authoritative version.\n\nUsed when responses come from caches, proxies, or transformation services where the data might be slightly different from the original. Common in CDN scenarios or when data is processed through middleware.\n\nThe request succeeded but the response data may not be the most current or authoritative version. The client should be aware that the data might be cached or transformed."
        },
        "204": {
          "$ref": "#/definitions/Response",
          "description": "204 No Content\n\nIndicates that the request has succeeded but there is no content to return in the response body.\n\nThe request was processed successfully but the response body is intentionally empty. The client should not expect any content.\n\nUsed for DELETE operations, PUT requests that don't return data, or any operation where success is indicated by the absence of content. Common in REST APIs for operations that modify state without returning data.\n\nThe operation completed successfully but no data is returned. The client should not attempt to parse a response body.",
          "markdownDescription": "204 No Content\n\nIndicates that the request has succeeded but there is no content to return in the response body.\n\nThe request was processed successfully but the response body is intentionally empty. The client should not expect any content.\n\nUsed for DELETE operations, PUT requests that don't return data, or any operation where success is indicated by the absence of content. Common in REST APIs for operations that modify state without returning data.\n\nThe operation completed successfully but no data is returned. The client should not attempt to parse a response body."
        },
        "205": {
          "$ref": "#/definitions/Response",
          "description": "205 Reset Content\n\nIndicates that the request has succeeded and the client should reset the document view that caused the request to be sent.\n\nThe request was processed successfully and the client should clear any form data or reset the user interface state.\n\nUsed in web applications where form submissions should clear the form after successful processing, or when the client needs to reset its state. Common in form handling and user interface operations.\n\nThe operation succeeded and the client should reset its current state, typically clearing forms or resetting the user interface.",
          "markdownDescription": "205 Reset Content\n\nIndicates that the request has succeeded and the client should reset the document view that caused the request to be sent.\n\nThe request was processed successfully and the client should clear any form data or reset the user interface state.\n\nUsed in web applications where form submissions should clear the form after successful processing, or when the client needs to reset its state. Common in form handling and user interface operations.\n\nThe operation succeeded and the client should reset its current state, typically clearing forms or resetting the user interface."
        },
        "206": {
          "$ref": "#/definitions/Response",
          "description": "206 Partial Content\n\nIndicates that the server is delivering only part of the resource due to a range request.\n\nThe request included a Range header and the server is returning only the requested portion of the resource, along with information about the range delivered.\n\nUsed for resumable downloads, video streaming, large file transfers, and any scenario where the client requests a specific portion of a resource. Enables efficient handling of large files and interrupted downloads.\n\nThe response contains only a portion of the requested resource. The client should expect partial content and may need to make additional requests for the complete resource.",
          "markdownDescription": "206 Partial Content\n\nIndicates that the server is delivering only part of the resource due to a range request.\n\nThe request included a Range header and the server is returning only the requested portion of the resource, along with information about the range delivered.\n\nUsed for resumable downloads, video streaming, large file transfers, and any scenario where the client requests a specific portion of a resource. Enables efficient handling of large files and interrupted downloads.\n\nThe response contains only a portion of the requested resource. The client should expect partial content and may need to make additional requests for the complete resource."
        },
        "207": {
          "$ref": "#/definitions/Response",
          "description": "207 Multi-Status\n\nIndicates that multiple independent operations might have been performed, and the status of each operation is reported in the response body.\n\nThe response contains multiple status codes for different operations, typically in XML format with individual operation results.\n\nUsed in WebDAV environments for batch operations, bulk file operations, or any scenario where multiple independent operations are performed in a single request. Common in file management systems and collaborative editing platforms.\n\nMultiple operations were attempted and the response contains the status of each individual operation. The client should parse the response body to determine which operations succeeded or failed.",
          "markdownDescription": "207 Multi-Status\n\nIndicates that multiple independent operations might have been performed, and the status of each operation is reported in the response body.\n\nThe response contains multiple status codes for different operations, typically in XML format with individual operation results.\n\nUsed in WebDAV environments for batch operations, bulk file operations, or any scenario where multiple independent operations are performed in a single request. Common in file management systems and collaborative editing platforms.\n\nMultiple operations were attempted and the response contains the status of each individual operation. The client should parse the response body to determine which operations succeeded or failed."
        },
        "208": {
          "$ref": "#/definitions/Response",
          "description": "208 Already Reported\n\nIndicates that the members of a DAV binding have already been enumerated in a previous response to this request, and are not being included again.\n\nUsed in WebDAV to avoid repeating the same information in a multi-status response when the same binding has already been reported.\n\nUsed in WebDAV environments to optimize responses by avoiding duplicate information in multi-status responses. Helps reduce response size and improve performance in complex file system operations.\n\nThe information for this binding has already been reported in a previous part of the response. The client should not expect additional information for this specific binding.",
          "markdownDescription": "208 Already Reported\n\nIndicates that the members of a DAV binding have already been enumerated in a previous response to this request, and are not being included again.\n\nUsed in WebDAV to avoid repeating the same information in a multi-status response when the same binding has already been reported.\n\nUsed in WebDAV environments to optimize responses by avoiding duplicate information in multi-status responses. Helps reduce response size and improve performance in complex file system operations.\n\nThe information for this binding has already been reported in a previous part of the response. The client should not expect additional information for this specific binding."
        },
        "226": {
          "$ref": "#/definitions/Response",
          "description": "226 IM Used\n\nIndicates that the server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n\nThe response represents the result of applying instance manipulations (like delta encoding) to the current resource instance.\n\nUsed in scenarios involving delta encoding, instance manipulations, or when the response represents a transformed version of the resource. Common in content delivery networks and systems that optimize data transmission.\n\nThe response contains a manipulated version of the resource, typically optimized for transmission. The client should be aware that the data has been processed or transformed.",
          "markdownDescription": "226 IM Used\n\nIndicates that the server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n\nThe response represents the result of applying instance manipulations (like delta encoding) to the current resource instance.\n\nUsed in scenarios involving delta encoding, instance manipulations, or when the response represents a transformed version of the resource. Common in content delivery networks and systems that optimize data transmission.\n\nThe response contains a manipulated version of the resource, typically optimized for transmission. The client should be aware that the data has been processed or transformed."
        },
        "300": {
          "$ref": "#/definitions/Response",
          "description": "300 Multiple Choices\n\nIndicates that the request has multiple possible responses and the client should choose one.\n\nThe server has multiple representations of the requested resource and the client must choose which one to use.\n\nUsed when content negotiation results in multiple valid options, such as different formats (JSON, XML, HTML) or different languages. The response typically includes a list of available options with their characteristics.\n\nThe client should examine the available options and make a choice, typically by sending another request with more specific preferences or headers.",
          "markdownDescription": "300 Multiple Choices\n\nIndicates that the request has multiple possible responses and the client should choose one.\n\nThe server has multiple representations of the requested resource and the client must choose which one to use.\n\nUsed when content negotiation results in multiple valid options, such as different formats (JSON, XML, HTML) or different languages. The response typically includes a list of available options with their characteristics.\n\nThe client should examine the available options and make a choice, typically by sending another request with more specific preferences or headers."
        },
        "301": {
          "$ref": "#/definitions/Response",
          "description": "301 Moved Permanently\n\nIndicates that the requested resource has been permanently moved to a new location.\n\nThe resource has been permanently relocated and all future requests should be directed to the new URL provided in the Location header.\n\nUsed when resources are permanently relocated, such as when changing domain names, restructuring URLs, or moving content to new locations. Browsers and clients should update their bookmarks and caches.\n\nThe resource has moved permanently and the client should update all references to use the new URL. Search engines and caches should update their indexes.",
          "markdownDescription": "301 Moved Permanently\n\nIndicates that the requested resource has been permanently moved to a new location.\n\nThe resource has been permanently relocated and all future requests should be directed to the new URL provided in the Location header.\n\nUsed when resources are permanently relocated, such as when changing domain names, restructuring URLs, or moving content to new locations. Browsers and clients should update their bookmarks and caches.\n\nThe resource has moved permanently and the client should update all references to use the new URL. Search engines and caches should update their indexes."
        },
        "302": {
          "$ref": "#/definitions/Response",
          "description": "302 Found\n\nIndicates that the requested resource has been temporarily moved to a different location.\n\nThe resource is temporarily available at a different URL, but the original URL should continue to be used for future requests.\n\nUsed for temporary redirects such as maintenance pages, temporary content moves, or when the resource is temporarily unavailable at the original location. The original URL remains valid.\n\nThe resource is temporarily at a different location. The client should follow the redirect but continue using the original URL for future requests.",
          "markdownDescription": "302 Found\n\nIndicates that the requested resource has been temporarily moved to a different location.\n\nThe resource is temporarily available at a different URL, but the original URL should continue to be used for future requests.\n\nUsed for temporary redirects such as maintenance pages, temporary content moves, or when the resource is temporarily unavailable at the original location. The original URL remains valid.\n\nThe resource is temporarily at a different location. The client should follow the redirect but continue using the original URL for future requests."
        },
        "303": {
          "$ref": "#/definitions/Response",
          "description": "303 See Other\n\nIndicates that the response to the request can be found at a different URL and should be retrieved using a GET request.\n\nThe request was processed but the response is available at a different location, and the client should use GET to retrieve it.\n\nUsed in POST-redirect-GET patterns, form submissions that redirect to a results page, or when the response to a POST request should be retrieved via GET. Common in web applications for avoiding duplicate form submissions.\n\nThe client should make a GET request to the provided URL to retrieve the response. This prevents duplicate submissions and provides a clean URL for the result.",
          "markdownDescription": "303 See Other\n\nIndicates that the response to the request can be found at a different URL and should be retrieved using a GET request.\n\nThe request was processed but the response is available at a different location, and the client should use GET to retrieve it.\n\nUsed in POST-redirect-GET patterns, form submissions that redirect to a results page, or when the response to a POST request should be retrieved via GET. Common in web applications for avoiding duplicate form submissions.\n\nThe client should make a GET request to the provided URL to retrieve the response. This prevents duplicate submissions and provides a clean URL for the result."
        },
        "304": {
          "$ref": "#/definitions/Response",
          "description": "304 Not Modified\n\nIndicates that the resource has not been modified since the last request, so the cached version can be used.\n\nThe resource has not changed since the last request, and the client can use its cached version. No response body is included.\n\nUsed for caching optimization when the client sends conditional headers (If-Modified-Since, If-None-Match). Reduces bandwidth usage and improves performance by avoiding unnecessary data transfer.\n\nThe resource has not changed and the client should use its cached version. This is an optimization response that saves bandwidth and improves performance.",
          "markdownDescription": "304 Not Modified\n\nIndicates that the resource has not been modified since the last request, so the cached version can be used.\n\nThe resource has not changed since the last request, and the client can use its cached version. No response body is included.\n\nUsed for caching optimization when the client sends conditional headers (If-Modified-Since, If-None-Match). Reduces bandwidth usage and improves performance by avoiding unnecessary data transfer.\n\nThe resource has not changed and the client should use its cached version. This is an optimization response that saves bandwidth and improves performance."
        },
        "305": {
          "$ref": "#/definitions/Response",
          "description": "305 Use Proxy\n\nIndicates that the requested resource must be accessed through the proxy specified in the Location header.\n\nThe client must use the specified proxy to access the resource. This response is rarely used in modern web applications.\n\nUsed in corporate environments or specific network configurations where resources must be accessed through a particular proxy server. Mostly deprecated in modern web development.\n\nThe client should use the specified proxy to access the resource. This is rarely encountered in modern web applications.",
          "markdownDescription": "305 Use Proxy\n\nIndicates that the requested resource must be accessed through the proxy specified in the Location header.\n\nThe client must use the specified proxy to access the resource. This response is rarely used in modern web applications.\n\nUsed in corporate environments or specific network configurations where resources must be accessed through a particular proxy server. Mostly deprecated in modern web development.\n\nThe client should use the specified proxy to access the resource. This is rarely encountered in modern web applications."
        },
        "306": {
          "$ref": "#/definitions/Response",
          "description": "306 (Unused)\n\nThis status code is reserved and not used in current HTTP specifications.\n\nThis status code was previously used but is now reserved and should not be used in new implementations.\n\nNot used in modern web applications. This code is reserved and should not be implemented.\n\nThis status code should not be encountered in modern web applications.",
          "markdownDescription": "306 (Unused)\n\nThis status code is reserved and not used in current HTTP specifications.\n\nThis status code was previously used but is now reserved and should not be used in new implementations.\n\nNot used in modern web applications. This code is reserved and should not be implemented.\n\nThis status code should not be encountered in modern web applications."
        },
        "307": {
          "$ref": "#/definitions/Response",
          "description": "307 Temporary Redirect\n\nIndicates that the requested resource has been temporarily moved to a different location, and the request method should be preserved.\n\nThe resource is temporarily available at a different URL, and the client should repeat the request using the same method to the new location.\n\nUsed for temporary redirects where the HTTP method (POST, PUT, DELETE) should be preserved. Common in API versioning, temporary maintenance, or when resources are temporarily relocated.\n\nThe resource is temporarily at a different location and the client should repeat the same request method to the new URL.",
          "markdownDescription": "307 Temporary Redirect\n\nIndicates that the requested resource has been temporarily moved to a different location, and the request method should be preserved.\n\nThe resource is temporarily available at a different URL, and the client should repeat the request using the same method to the new location.\n\nUsed for temporary redirects where the HTTP method (POST, PUT, DELETE) should be preserved. Common in API versioning, temporary maintenance, or when resources are temporarily relocated.\n\nThe resource is temporarily at a different location and the client should repeat the same request method to the new URL."
        },
        "308": {
          "$ref": "#/definitions/Response",
          "description": "308 Permanent Redirect\n\nIndicates that the requested resource has been permanently moved to a different location, and the request method should be preserved.\n\nThe resource has been permanently relocated and the client should use the new URL for all future requests, preserving the original HTTP method.\n\nUsed for permanent redirects where the HTTP method should be preserved, such as when moving APIs to new endpoints or restructuring resource URLs. Common in API versioning and permanent relocations.\n\nThe resource has moved permanently and the client should update all references to use the new URL while preserving the original HTTP method.",
          "markdownDescription": "308 Permanent Redirect\n\nIndicates that the requested resource has been permanently moved to a different location, and the request method should be preserved.\n\nThe resource has been permanently relocated and the client should use the new URL for all future requests, preserving the original HTTP method.\n\nUsed for permanent redirects where the HTTP method should be preserved, such as when moving APIs to new endpoints or restructuring resource URLs. Common in API versioning and permanent relocations.\n\nThe resource has moved permanently and the client should update all references to use the new URL while preserving the original HTTP method."
        },
        "400": {
          "$ref": "#/definitions/Response",
          "description": "400 Bad Request\n\nIndicates that the server cannot process the request due to a client error.\n\nThe request syntax is invalid, malformed, or contains incorrect parameters that the server cannot understand or process.\n\nUsed for validation errors, malformed JSON, missing required fields, invalid parameter values, or any client-side error that prevents the server from processing the request. Common in API validation scenarios.\n\nThe client has sent an invalid request and should fix the request before retrying. The response body should contain details about what was wrong with the request.",
          "markdownDescription": "400 Bad Request\n\nIndicates that the server cannot process the request due to a client error.\n\nThe request syntax is invalid, malformed, or contains incorrect parameters that the server cannot understand or process.\n\nUsed for validation errors, malformed JSON, missing required fields, invalid parameter values, or any client-side error that prevents the server from processing the request. Common in API validation scenarios.\n\nThe client has sent an invalid request and should fix the request before retrying. The response body should contain details about what was wrong with the request."
        },
        "401": {
          "$ref": "#/definitions/Response",
          "description": "401 Unauthorized\n\nIndicates that the request requires authentication and the client has not provided valid credentials.\n\nThe request lacks valid authentication credentials or the provided credentials are invalid, expired, or insufficient.\n\nUsed when authentication is required but not provided, when login credentials are invalid, or when the authentication token has expired. Common in protected API endpoints and user authentication flows.\n\nThe client needs to authenticate before accessing the resource. The response should include authentication challenge headers (WWW-Authenticate) indicating how to authenticate.",
          "markdownDescription": "401 Unauthorized\n\nIndicates that the request requires authentication and the client has not provided valid credentials.\n\nThe request lacks valid authentication credentials or the provided credentials are invalid, expired, or insufficient.\n\nUsed when authentication is required but not provided, when login credentials are invalid, or when the authentication token has expired. Common in protected API endpoints and user authentication flows.\n\nThe client needs to authenticate before accessing the resource. The response should include authentication challenge headers (WWW-Authenticate) indicating how to authenticate."
        },
        "402": {
          "$ref": "#/definitions/Response",
          "description": "402 Payment Required\n\nIndicates that the request requires payment before it can be processed.\n\nThe request cannot be fulfilled because payment is required. This status code is reserved for future use in digital payment systems.\n\nUsed in payment-required scenarios, subscription services, or when access to a resource requires payment. Common in freemium models, paid API access, or premium content services.\n\nThe client needs to provide payment information or complete a payment process before accessing the resource. The response should include information about how to make the payment.",
          "markdownDescription": "402 Payment Required\n\nIndicates that the request requires payment before it can be processed.\n\nThe request cannot be fulfilled because payment is required. This status code is reserved for future use in digital payment systems.\n\nUsed in payment-required scenarios, subscription services, or when access to a resource requires payment. Common in freemium models, paid API access, or premium content services.\n\nThe client needs to provide payment information or complete a payment process before accessing the resource. The response should include information about how to make the payment."
        },
        "403": {
          "$ref": "#/definitions/Response",
          "description": "403 Forbidden\n\nIndicates that the server understood the request but refuses to authorize it.\n\nThe client is authenticated but does not have permission to access the requested resource or perform the requested action.\n\nUsed when the user is logged in but lacks the necessary permissions, when access is restricted based on user roles, or when the resource is not accessible to the current user. Common in authorization and access control scenarios.\n\nThe client is authenticated but not authorized to access the resource. The client should not retry the request without additional permissions.",
          "markdownDescription": "403 Forbidden\n\nIndicates that the server understood the request but refuses to authorize it.\n\nThe client is authenticated but does not have permission to access the requested resource or perform the requested action.\n\nUsed when the user is logged in but lacks the necessary permissions, when access is restricted based on user roles, or when the resource is not accessible to the current user. Common in authorization and access control scenarios.\n\nThe client is authenticated but not authorized to access the resource. The client should not retry the request without additional permissions."
        },
        "404": {
          "$ref": "#/definitions/Response",
          "description": "404 Not Found\n\nIndicates that the requested resource could not be found on the server.\n\nThe server cannot find the requested resource at the specified URL, or the resource does not exist.\n\nUsed when a resource doesn't exist, when the URL is incorrect, or when the requested item has been deleted. Common in web applications for missing pages, deleted content, or non-existent API endpoints.\n\nThe requested resource does not exist. The client should verify the URL or check if the resource has been moved or deleted.",
          "markdownDescription": "404 Not Found\n\nIndicates that the requested resource could not be found on the server.\n\nThe server cannot find the requested resource at the specified URL, or the resource does not exist.\n\nUsed when a resource doesn't exist, when the URL is incorrect, or when the requested item has been deleted. Common in web applications for missing pages, deleted content, or non-existent API endpoints.\n\nThe requested resource does not exist. The client should verify the URL or check if the resource has been moved or deleted."
        },
        "405": {
          "$ref": "#/definitions/Response",
          "description": "405 Method Not Allowed\n\nIndicates that the HTTP method used in the request is not allowed for the requested resource.\n\nThe resource exists but the HTTP method (GET, POST, PUT, DELETE, etc.) is not supported for this particular resource.\n\nUsed when a resource only supports certain HTTP methods, such as a read-only endpoint that doesn't allow POST requests, or when the method is not implemented for the specific resource. Common in REST API design.\n\nThe HTTP method is not allowed for this resource. The response should include an Allow header listing the permitted methods.",
          "markdownDescription": "405 Method Not Allowed\n\nIndicates that the HTTP method used in the request is not allowed for the requested resource.\n\nThe resource exists but the HTTP method (GET, POST, PUT, DELETE, etc.) is not supported for this particular resource.\n\nUsed when a resource only supports certain HTTP methods, such as a read-only endpoint that doesn't allow POST requests, or when the method is not implemented for the specific resource. Common in REST API design.\n\nThe HTTP method is not allowed for this resource. The response should include an Allow header listing the permitted methods."
        },
        "406": {
          "$ref": "#/definitions/Response",
          "description": "406 Not Acceptable\n\nIndicates that the server cannot produce a response matching the client's Accept headers.\n\nThe server cannot generate a response in any of the formats requested by the client's Accept headers.\n\nUsed when the client requests a specific content type (JSON, XML, HTML) that the server cannot provide, or when content negotiation fails. Common in API versioning and content type mismatches.\n\nThe server cannot provide the requested content type. The client should check the Accept headers or request a different format.",
          "markdownDescription": "406 Not Acceptable\n\nIndicates that the server cannot produce a response matching the client's Accept headers.\n\nThe server cannot generate a response in any of the formats requested by the client's Accept headers.\n\nUsed when the client requests a specific content type (JSON, XML, HTML) that the server cannot provide, or when content negotiation fails. Common in API versioning and content type mismatches.\n\nThe server cannot provide the requested content type. The client should check the Accept headers or request a different format."
        },
        "407": {
          "$ref": "#/definitions/Response",
          "description": "407 Proxy Authentication Required\n\nIndicates that the client must authenticate with the proxy server before the request can be processed.\n\nThe proxy server requires authentication before it will forward the request to the destination server.\n\nUsed in corporate environments or networks where proxy authentication is required. Common in enterprise networks, VPN connections, or when accessing resources through authenticated proxies.\n\nThe client needs to authenticate with the proxy server. The response should include Proxy-Authenticate headers indicating how to authenticate.",
          "markdownDescription": "407 Proxy Authentication Required\n\nIndicates that the client must authenticate with the proxy server before the request can be processed.\n\nThe proxy server requires authentication before it will forward the request to the destination server.\n\nUsed in corporate environments or networks where proxy authentication is required. Common in enterprise networks, VPN connections, or when accessing resources through authenticated proxies.\n\nThe client needs to authenticate with the proxy server. The response should include Proxy-Authenticate headers indicating how to authenticate."
        },
        "408": {
          "$ref": "#/definitions/Response",
          "description": "408 Request Timeout\n\nIndicates that the server timed out while waiting for the request from the client.\n\nThe server did not receive a complete request within the time it was prepared to wait.\n\nUsed when the client takes too long to send the complete request, when network issues cause delays, or when the server has a timeout policy for request processing. Common in slow network conditions or when clients fail to send complete requests.\n\nThe request timed out and the client should retry the request. The client may need to optimize the request or check network connectivity.",
          "markdownDescription": "408 Request Timeout\n\nIndicates that the server timed out while waiting for the request from the client.\n\nThe server did not receive a complete request within the time it was prepared to wait.\n\nUsed when the client takes too long to send the complete request, when network issues cause delays, or when the server has a timeout policy for request processing. Common in slow network conditions or when clients fail to send complete requests.\n\nThe request timed out and the client should retry the request. The client may need to optimize the request or check network connectivity."
        },
        "409": {
          "$ref": "#/definitions/Response",
          "description": "409 Conflict\n\nIndicates that the request conflicts with the current state of the resource.\n\nThe request cannot be completed due to a conflict with the current state of the resource, such as a version mismatch or concurrent modification.\n\nUsed when trying to create a resource that already exists, when there's a version conflict in concurrent editing, or when the request conflicts with business rules. Common in collaborative editing, version control, and resource creation scenarios.\n\nThe request conflicts with the current state of the resource. The client should resolve the conflict before retrying the request.",
          "markdownDescription": "409 Conflict\n\nIndicates that the request conflicts with the current state of the resource.\n\nThe request cannot be completed due to a conflict with the current state of the resource, such as a version mismatch or concurrent modification.\n\nUsed when trying to create a resource that already exists, when there's a version conflict in concurrent editing, or when the request conflicts with business rules. Common in collaborative editing, version control, and resource creation scenarios.\n\nThe request conflicts with the current state of the resource. The client should resolve the conflict before retrying the request."
        },
        "410": {
          "$ref": "#/definitions/Response",
          "description": "410 Gone\n\nIndicates that the requested resource is no longer available and will not be available again.\n\nThe resource has been permanently removed and will not be restored. This is different from 404, which indicates the resource was never found.\n\nUsed when content has been permanently deleted, when resources have been removed and will not be restored, or when temporary content has expired. Common in content management systems and temporary resource scenarios.\n\nThe resource has been permanently removed and will not be available again. The client should not retry the request and should update any references to this resource.",
          "markdownDescription": "410 Gone\n\nIndicates that the requested resource is no longer available and will not be available again.\n\nThe resource has been permanently removed and will not be restored. This is different from 404, which indicates the resource was never found.\n\nUsed when content has been permanently deleted, when resources have been removed and will not be restored, or when temporary content has expired. Common in content management systems and temporary resource scenarios.\n\nThe resource has been permanently removed and will not be available again. The client should not retry the request and should update any references to this resource."
        },
        "411": {
          "$ref": "#/definitions/Response",
          "description": "411 Length Required\n\nIndicates that the server requires a Content-Length header in the request.\n\nThe server cannot process the request without knowing the exact length of the request body.\n\nUsed when the server needs to know the exact size of the request body before processing, such as for file uploads, large data transfers, or when implementing specific security measures. Common in file upload scenarios and certain API endpoints.\n\nThe client must include a Content-Length header in the request. The client should retry the request with the proper Content-Length header.",
          "markdownDescription": "411 Length Required\n\nIndicates that the server requires a Content-Length header in the request.\n\nThe server cannot process the request without knowing the exact length of the request body.\n\nUsed when the server needs to know the exact size of the request body before processing, such as for file uploads, large data transfers, or when implementing specific security measures. Common in file upload scenarios and certain API endpoints.\n\nThe client must include a Content-Length header in the request. The client should retry the request with the proper Content-Length header."
        },
        "412": {
          "$ref": "#/definitions/Response",
          "description": "412 Precondition Failed\n\nIndicates that one or more preconditions in the request headers were not met.\n\nThe server cannot meet the conditions specified in the request headers, such as If-Match, If-None-Match, If-Modified-Since, or If-Unmodified-Since.\n\nUsed in conditional requests where the client specifies conditions that must be met, such as version checking, cache validation, or optimistic concurrency control. Common in collaborative editing and caching scenarios.\n\nThe preconditions in the request were not met. The client should check the conditions and retry the request with updated preconditions.",
          "markdownDescription": "412 Precondition Failed\n\nIndicates that one or more preconditions in the request headers were not met.\n\nThe server cannot meet the conditions specified in the request headers, such as If-Match, If-None-Match, If-Modified-Since, or If-Unmodified-Since.\n\nUsed in conditional requests where the client specifies conditions that must be met, such as version checking, cache validation, or optimistic concurrency control. Common in collaborative editing and caching scenarios.\n\nThe preconditions in the request were not met. The client should check the conditions and retry the request with updated preconditions."
        },
        "413": {
          "$ref": "#/definitions/Response",
          "description": "413 Content Too Large\n\nIndicates that the request payload is too large for the server to process.\n\nThe request body exceeds the server's maximum allowed size limit.\n\nUsed when file uploads exceed size limits, when request bodies are too large for processing, or when the server has configured size restrictions. Common in file upload scenarios and API rate limiting.\n\nThe request payload is too large. The client should reduce the size of the request body or split it into smaller chunks.",
          "markdownDescription": "413 Content Too Large\n\nIndicates that the request payload is too large for the server to process.\n\nThe request body exceeds the server's maximum allowed size limit.\n\nUsed when file uploads exceed size limits, when request bodies are too large for processing, or when the server has configured size restrictions. Common in file upload scenarios and API rate limiting.\n\nThe request payload is too large. The client should reduce the size of the request body or split it into smaller chunks."
        },
        "414": {
          "$ref": "#/definitions/Response",
          "description": "414 URI Too Long\n\nIndicates that the URI provided in the request is too long for the server to process.\n\nThe URL exceeds the server's maximum allowed length limit.\n\nUsed when URLs are too long due to excessive query parameters, when GET requests contain too much data in the URL, or when the server has configured URI length restrictions. Common in search APIs and parameter-heavy requests.\n\nThe URI is too long. The client should shorten the URL or use POST instead of GET for large amounts of data.",
          "markdownDescription": "414 URI Too Long\n\nIndicates that the URI provided in the request is too long for the server to process.\n\nThe URL exceeds the server's maximum allowed length limit.\n\nUsed when URLs are too long due to excessive query parameters, when GET requests contain too much data in the URL, or when the server has configured URI length restrictions. Common in search APIs and parameter-heavy requests.\n\nThe URI is too long. The client should shorten the URL or use POST instead of GET for large amounts of data."
        },
        "415": {
          "$ref": "#/definitions/Response",
          "description": "415 Unsupported Media Type\n\nIndicates that the server cannot process the request because the media type is not supported.\n\nThe server cannot process the request body because the Content-Type is not supported or recognized.\n\nUsed when the client sends data in an unsupported format, when the server only accepts specific content types, or when there's a mismatch between the expected and actual content type. Common in API endpoints with strict content type requirements.\n\nThe content type is not supported. The client should check the API documentation for supported content types and retry with the correct Content-Type header.",
          "markdownDescription": "415 Unsupported Media Type\n\nIndicates that the server cannot process the request because the media type is not supported.\n\nThe server cannot process the request body because the Content-Type is not supported or recognized.\n\nUsed when the client sends data in an unsupported format, when the server only accepts specific content types, or when there's a mismatch between the expected and actual content type. Common in API endpoints with strict content type requirements.\n\nThe content type is not supported. The client should check the API documentation for supported content types and retry with the correct Content-Type header."
        },
        "416": {
          "$ref": "#/definitions/Response",
          "description": "416 Range Not Satisfiable\n\nIndicates that the server cannot satisfy the range request specified in the Range header.\n\nThe requested range is not valid for the resource, either because the range is beyond the resource size or the resource doesn't support range requests.\n\nUsed when range requests are invalid, when the requested range exceeds the resource size, or when the resource doesn't support partial content requests. Common in file download scenarios and media streaming.\n\nThe range request is not satisfiable. The client should check the range specification or request the full resource.",
          "markdownDescription": "416 Range Not Satisfiable\n\nIndicates that the server cannot satisfy the range request specified in the Range header.\n\nThe requested range is not valid for the resource, either because the range is beyond the resource size or the resource doesn't support range requests.\n\nUsed when range requests are invalid, when the requested range exceeds the resource size, or when the resource doesn't support partial content requests. Common in file download scenarios and media streaming.\n\nThe range request is not satisfiable. The client should check the range specification or request the full resource."
        },
        "417": {
          "$ref": "#/definitions/Response",
          "description": "417 Expectation Failed\n\nIndicates that the server cannot meet the requirements of the Expect header.\n\nThe server cannot fulfill the expectations specified in the Expect header, typically when the server cannot handle the 100-continue expectation.\n\nUsed when the server cannot handle the Expect: 100-continue header, when the server doesn't support the expected behavior, or when there's a mismatch between client expectations and server capabilities. Common in HTTP/1.1 implementations.\n\nThe server cannot meet the expectations in the request. The client should retry without the Expect header or adjust the request.",
          "markdownDescription": "417 Expectation Failed\n\nIndicates that the server cannot meet the requirements of the Expect header.\n\nThe server cannot fulfill the expectations specified in the Expect header, typically when the server cannot handle the 100-continue expectation.\n\nUsed when the server cannot handle the Expect: 100-continue header, when the server doesn't support the expected behavior, or when there's a mismatch between client expectations and server capabilities. Common in HTTP/1.1 implementations.\n\nThe server cannot meet the expectations in the request. The client should retry without the Expect header or adjust the request."
        },
        "418": {
          "$ref": "#/definitions/Response",
          "description": "418 (Unused)\n\nThis status code is reserved and not used in current HTTP specifications.\n\nThis status code is reserved and should not be used in new implementations.\n\nNot used in modern web applications. This code is reserved and should not be implemented.\n\nThis status code should not be encountered in modern web applications.",
          "markdownDescription": "418 (Unused)\n\nThis status code is reserved and not used in current HTTP specifications.\n\nThis status code is reserved and should not be used in new implementations.\n\nNot used in modern web applications. This code is reserved and should not be implemented.\n\nThis status code should not be encountered in modern web applications."
        },
        "421": {
          "$ref": "#/definitions/Response",
          "description": "421 Misdirected Request\n\nIndicates that the request was directed to a server that is not able to produce a response.\n\nThe request was sent to a server that cannot handle it, typically due to HTTP/2 connection reuse issues or server configuration problems.\n\nUsed in HTTP/2 environments when a request is sent to the wrong server due to connection reuse, when there are server configuration issues, or when the request cannot be processed by the current server instance. Common in load balancing scenarios.\n\nThe request was sent to the wrong server. The client should retry the request, which may be routed to a different server.",
          "markdownDescription": "421 Misdirected Request\n\nIndicates that the request was directed to a server that is not able to produce a response.\n\nThe request was sent to a server that cannot handle it, typically due to HTTP/2 connection reuse issues or server configuration problems.\n\nUsed in HTTP/2 environments when a request is sent to the wrong server due to connection reuse, when there are server configuration issues, or when the request cannot be processed by the current server instance. Common in load balancing scenarios.\n\nThe request was sent to the wrong server. The client should retry the request, which may be routed to a different server."
        },
        "422": {
          "$ref": "#/definitions/Response",
          "description": "422 Unprocessable Content\n\nIndicates that the request is well-formed but contains semantic errors that prevent processing.\n\nThe request syntax is correct but the server cannot process the request due to semantic errors, such as validation failures or business rule violations.\n\nUsed for validation errors, business rule violations, or when the request is syntactically correct but logically invalid. Common in API validation scenarios where the request format is correct but the data is invalid.\n\nThe request is well-formed but contains semantic errors. The client should fix the data and retry the request.",
          "markdownDescription": "422 Unprocessable Content\n\nIndicates that the request is well-formed but contains semantic errors that prevent processing.\n\nThe request syntax is correct but the server cannot process the request due to semantic errors, such as validation failures or business rule violations.\n\nUsed for validation errors, business rule violations, or when the request is syntactically correct but logically invalid. Common in API validation scenarios where the request format is correct but the data is invalid.\n\nThe request is well-formed but contains semantic errors. The client should fix the data and retry the request."
        },
        "423": {
          "$ref": "#/definitions/Response",
          "description": "423 Locked\n\nIndicates that the requested resource is locked and cannot be modified.\n\nThe resource is locked by another process or user and cannot be accessed or modified at this time.\n\nUsed in WebDAV environments for file locking, collaborative editing scenarios, or when resources are temporarily locked for maintenance. Common in document management systems and collaborative editing platforms.\n\nThe resource is locked and cannot be accessed. The client should wait and retry the request later.",
          "markdownDescription": "423 Locked\n\nIndicates that the requested resource is locked and cannot be modified.\n\nThe resource is locked by another process or user and cannot be accessed or modified at this time.\n\nUsed in WebDAV environments for file locking, collaborative editing scenarios, or when resources are temporarily locked for maintenance. Common in document management systems and collaborative editing platforms.\n\nThe resource is locked and cannot be accessed. The client should wait and retry the request later."
        },
        "424": {
          "$ref": "#/definitions/Response",
          "description": "424 Failed Dependency\n\nIndicates that the request failed because it depended on another request that also failed.\n\nThe request cannot be completed because it depends on another operation that failed, typically in batch or multi-part operations.\n\nUsed in WebDAV environments for batch operations where one operation depends on another, or in complex workflows where operations have dependencies. Common in file management systems and collaborative editing scenarios.\n\nThe request failed due to a dependency failure. The client should check the dependencies and retry the request.",
          "markdownDescription": "424 Failed Dependency\n\nIndicates that the request failed because it depended on another request that also failed.\n\nThe request cannot be completed because it depends on another operation that failed, typically in batch or multi-part operations.\n\nUsed in WebDAV environments for batch operations where one operation depends on another, or in complex workflows where operations have dependencies. Common in file management systems and collaborative editing scenarios.\n\nThe request failed due to a dependency failure. The client should check the dependencies and retry the request."
        },
        "425": {
          "$ref": "#/definitions/Response",
          "description": "425 Too Early\n\nIndicates that the server is unwilling to process the request because it might be replayed.\n\nThe server is concerned that the request might be replayed and is unwilling to process it at this time, typically due to timing or security concerns.\n\nUsed in scenarios where request replay is a security concern, such as in early data scenarios or when the server needs to prevent replay attacks. Common in security-sensitive applications and protocols.\n\nThe server is unwilling to process the request due to replay concerns. The client should retry the request later.",
          "markdownDescription": "425 Too Early\n\nIndicates that the server is unwilling to process the request because it might be replayed.\n\nThe server is concerned that the request might be replayed and is unwilling to process it at this time, typically due to timing or security concerns.\n\nUsed in scenarios where request replay is a security concern, such as in early data scenarios or when the server needs to prevent replay attacks. Common in security-sensitive applications and protocols.\n\nThe server is unwilling to process the request due to replay concerns. The client should retry the request later."
        },
        "426": {
          "$ref": "#/definitions/Response",
          "description": "426 Upgrade Required\n\nIndicates that the server requires the client to upgrade to a different protocol.\n\nThe server requires the client to use a different protocol version or upgrade to a newer version to access the resource.\n\nUsed when the server requires protocol upgrades, when the client is using an outdated protocol version, or when the server only supports newer protocol versions. Common in API versioning and protocol migration scenarios.\n\nThe client must upgrade to a different protocol version. The response should include upgrade information.",
          "markdownDescription": "426 Upgrade Required\n\nIndicates that the server requires the client to upgrade to a different protocol.\n\nThe server requires the client to use a different protocol version or upgrade to a newer version to access the resource.\n\nUsed when the server requires protocol upgrades, when the client is using an outdated protocol version, or when the server only supports newer protocol versions. Common in API versioning and protocol migration scenarios.\n\nThe client must upgrade to a different protocol version. The response should include upgrade information."
        },
        "428": {
          "$ref": "#/definitions/Response",
          "description": "428 Precondition Required\n\nIndicates that the server requires the request to include certain preconditions.\n\nThe server requires the client to include specific preconditions in the request headers before it will process the request.\n\nUsed when the server requires specific preconditions for security or consistency reasons, such as requiring If-Match headers for optimistic concurrency control or other conditional headers. Common in collaborative editing and version control scenarios.\n\nThe server requires specific preconditions. The client should include the required preconditions and retry the request.",
          "markdownDescription": "428 Precondition Required\n\nIndicates that the server requires the request to include certain preconditions.\n\nThe server requires the client to include specific preconditions in the request headers before it will process the request.\n\nUsed when the server requires specific preconditions for security or consistency reasons, such as requiring If-Match headers for optimistic concurrency control or other conditional headers. Common in collaborative editing and version control scenarios.\n\nThe server requires specific preconditions. The client should include the required preconditions and retry the request."
        },
        "429": {
          "$ref": "#/definitions/Response",
          "description": "429 Too Many Requests\n\nIndicates that the client has sent too many requests in a given time period and should slow down.\n\nThe client has exceeded the rate limit and the server is refusing to process additional requests until the rate limit resets.\n\nUsed for rate limiting, API throttling, and preventing abuse. Common in API endpoints that need to control request frequency, prevent spam, or manage resource usage. Often includes retry-after headers.\n\nThe client has exceeded the rate limit and should slow down. The client should wait before retrying the request.",
          "markdownDescription": "429 Too Many Requests\n\nIndicates that the client has sent too many requests in a given time period and should slow down.\n\nThe client has exceeded the rate limit and the server is refusing to process additional requests until the rate limit resets.\n\nUsed for rate limiting, API throttling, and preventing abuse. Common in API endpoints that need to control request frequency, prevent spam, or manage resource usage. Often includes retry-after headers.\n\nThe client has exceeded the rate limit and should slow down. The client should wait before retrying the request."
        },
        "431": {
          "$ref": "#/definitions/Response",
          "description": "431 Request Header Fields Too Large\n\nIndicates that the server is unwilling to process the request because the header fields are too large.\n\nThe request headers exceed the server's maximum allowed size limit.\n\nUsed when request headers are too large, when there are too many headers, or when individual headers exceed size limits. Common in scenarios with large authentication tokens or excessive header data.\n\nThe request headers are too large. The client should reduce the size of the headers and retry the request.",
          "markdownDescription": "431 Request Header Fields Too Large\n\nIndicates that the server is unwilling to process the request because the header fields are too large.\n\nThe request headers exceed the server's maximum allowed size limit.\n\nUsed when request headers are too large, when there are too many headers, or when individual headers exceed size limits. Common in scenarios with large authentication tokens or excessive header data.\n\nThe request headers are too large. The client should reduce the size of the headers and retry the request."
        },
        "451": {
          "$ref": "#/definitions/Response",
          "description": "451 Unavailable For Legal Reasons\n\nIndicates that the requested resource is unavailable due to legal reasons.\n\nThe resource is not available due to legal restrictions, such as censorship, court orders, or regulatory requirements.\n\nUsed when content is blocked due to legal restrictions, when resources are unavailable in certain jurisdictions, or when there are regulatory compliance issues. Common in content delivery networks and international services.\n\nThe resource is unavailable due to legal restrictions. The client should not retry the request as it will not be available.",
          "markdownDescription": "451 Unavailable For Legal Reasons\n\nIndicates that the requested resource is unavailable due to legal reasons.\n\nThe resource is not available due to legal restrictions, such as censorship, court orders, or regulatory requirements.\n\nUsed when content is blocked due to legal restrictions, when resources are unavailable in certain jurisdictions, or when there are regulatory compliance issues. Common in content delivery networks and international services.\n\nThe resource is unavailable due to legal restrictions. The client should not retry the request as it will not be available."
        },
        "500": {
          "$ref": "#/definitions/Response",
          "description": "500 Internal Server Error\n\nIndicates that the server encountered an unexpected condition that prevented it from fulfilling the request.\n\nThe server encountered an internal error or exception that prevented it from processing the request successfully.\n\nUsed for server-side errors, unhandled exceptions, database connection failures, or any unexpected server-side issue. Common in applications when there are bugs, configuration issues, or resource problems.\n\nThe server encountered an internal error. The client should retry the request later, as this is typically a temporary issue.",
          "markdownDescription": "500 Internal Server Error\n\nIndicates that the server encountered an unexpected condition that prevented it from fulfilling the request.\n\nThe server encountered an internal error or exception that prevented it from processing the request successfully.\n\nUsed for server-side errors, unhandled exceptions, database connection failures, or any unexpected server-side issue. Common in applications when there are bugs, configuration issues, or resource problems.\n\nThe server encountered an internal error. The client should retry the request later, as this is typically a temporary issue."
        },
        "501": {
          "$ref": "#/definitions/Response",
          "description": "501 Not Implemented\n\nIndicates that the server does not support the functionality required to fulfill the request.\n\nThe server does not recognize the request method or lacks the ability to fulfill the request.\n\nUsed when the server doesn't support the requested HTTP method, when functionality is not implemented, or when the server cannot handle the request. Common in API development when endpoints are not yet implemented.\n\nThe server does not support the requested functionality. The client should check the API documentation for supported methods and features.",
          "markdownDescription": "501 Not Implemented\n\nIndicates that the server does not support the functionality required to fulfill the request.\n\nThe server does not recognize the request method or lacks the ability to fulfill the request.\n\nUsed when the server doesn't support the requested HTTP method, when functionality is not implemented, or when the server cannot handle the request. Common in API development when endpoints are not yet implemented.\n\nThe server does not support the requested functionality. The client should check the API documentation for supported methods and features."
        },
        "502": {
          "$ref": "#/definitions/Response",
          "description": "502 Bad Gateway\n\nIndicates that the server, while acting as a gateway or proxy, received an invalid response from an upstream server.\n\nThe server acting as a gateway or proxy received an invalid response from the upstream server it was trying to access.\n\nUsed in load balancers, reverse proxies, and API gateways when the upstream server returns an invalid response or is unreachable. Common in microservices architectures and distributed systems.\n\nThe gateway received an invalid response from the upstream server. The client should retry the request later.",
          "markdownDescription": "502 Bad Gateway\n\nIndicates that the server, while acting as a gateway or proxy, received an invalid response from an upstream server.\n\nThe server acting as a gateway or proxy received an invalid response from the upstream server it was trying to access.\n\nUsed in load balancers, reverse proxies, and API gateways when the upstream server returns an invalid response or is unreachable. Common in microservices architectures and distributed systems.\n\nThe gateway received an invalid response from the upstream server. The client should retry the request later."
        },
        "503": {
          "$ref": "#/definitions/Response",
          "description": "503 Service Unavailable\n\nIndicates that the server is temporarily unable to handle the request due to maintenance or overload.\n\nThe server is temporarily unavailable, typically due to maintenance, overload, or temporary resource constraints.\n\nUsed during server maintenance, when the server is overloaded, when there are temporary resource issues, or when the service is temporarily down. Common in high-traffic scenarios and planned maintenance windows.\n\nThe server is temporarily unavailable. The client should retry the request later, often with exponential backoff.",
          "markdownDescription": "503 Service Unavailable\n\nIndicates that the server is temporarily unable to handle the request due to maintenance or overload.\n\nThe server is temporarily unavailable, typically due to maintenance, overload, or temporary resource constraints.\n\nUsed during server maintenance, when the server is overloaded, when there are temporary resource issues, or when the service is temporarily down. Common in high-traffic scenarios and planned maintenance windows.\n\nThe server is temporarily unavailable. The client should retry the request later, often with exponential backoff."
        },
        "504": {
          "$ref": "#/definitions/Response",
          "description": "504 Gateway Timeout\n\nIndicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server.\n\nThe gateway or proxy server timed out while waiting for a response from the upstream server.\n\nUsed in load balancers, reverse proxies, and API gateways when the upstream server takes too long to respond. Common in microservices architectures where services have different response times.\n\nThe gateway timed out waiting for the upstream server. The client should retry the request later.",
          "markdownDescription": "504 Gateway Timeout\n\nIndicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server.\n\nThe gateway or proxy server timed out while waiting for a response from the upstream server.\n\nUsed in load balancers, reverse proxies, and API gateways when the upstream server takes too long to respond. Common in microservices architectures where services have different response times.\n\nThe gateway timed out waiting for the upstream server. The client should retry the request later."
        },
        "505": {
          "$ref": "#/definitions/Response",
          "description": "505 HTTP Version Not Supported\n\nIndicates that the server does not support the HTTP protocol version used in the request.\n\nThe server does not support the HTTP protocol version specified in the request.\n\nUsed when the client uses an unsupported HTTP version, when the server only supports specific HTTP versions, or when there are protocol version mismatches. Common in legacy systems and protocol migration scenarios.\n\nThe server does not support the HTTP version used in the request. The client should use a supported HTTP version.",
          "markdownDescription": "505 HTTP Version Not Supported\n\nIndicates that the server does not support the HTTP protocol version used in the request.\n\nThe server does not support the HTTP protocol version specified in the request.\n\nUsed when the client uses an unsupported HTTP version, when the server only supports specific HTTP versions, or when there are protocol version mismatches. Common in legacy systems and protocol migration scenarios.\n\nThe server does not support the HTTP version used in the request. The client should use a supported HTTP version."
        },
        "506": {
          "$ref": "#/definitions/Response",
          "description": "506 Variant Also Negotiates\n\nIndicates that the server has an internal configuration error in which the chosen variant resource is configured to engage in transparent content negotiation.\n\nThe server has a configuration error where the selected variant resource is configured to engage in transparent content negotiation, creating a negotiation loop.\n\nUsed in content negotiation scenarios where there's a configuration error causing negotiation loops. Common in complex content delivery systems and advanced HTTP implementations.\n\nThe server has a configuration error in content negotiation. The client should contact the server administrator.",
          "markdownDescription": "506 Variant Also Negotiates\n\nIndicates that the server has an internal configuration error in which the chosen variant resource is configured to engage in transparent content negotiation.\n\nThe server has a configuration error where the selected variant resource is configured to engage in transparent content negotiation, creating a negotiation loop.\n\nUsed in content negotiation scenarios where there's a configuration error causing negotiation loops. Common in complex content delivery systems and advanced HTTP implementations.\n\nThe server has a configuration error in content negotiation. The client should contact the server administrator."
        },
        "507": {
          "$ref": "#/definitions/Response",
          "description": "507 Insufficient Storage\n\nIndicates that the server is unable to store the representation needed to complete the request.\n\nThe server cannot store the representation required to complete the request, typically due to storage space limitations.\n\nUsed in WebDAV environments when there's insufficient storage space, when the server cannot allocate storage for the request, or when storage quotas are exceeded. Common in file management systems and collaborative editing platforms.\n\nThe server cannot store the required representation. The client should check storage availability and retry the request.",
          "markdownDescription": "507 Insufficient Storage\n\nIndicates that the server is unable to store the representation needed to complete the request.\n\nThe server cannot store the representation required to complete the request, typically due to storage space limitations.\n\nUsed in WebDAV environments when there's insufficient storage space, when the server cannot allocate storage for the request, or when storage quotas are exceeded. Common in file management systems and collaborative editing platforms.\n\nThe server cannot store the required representation. The client should check storage availability and retry the request."
        },
        "508": {
          "$ref": "#/definitions/Response",
          "description": "508 Loop Detected\n\nIndicates that the server detected an infinite loop while processing the request.\n\nThe server detected an infinite loop in the request processing, typically in WebDAV operations.\n\nUsed in WebDAV environments when there are infinite loops in request processing, when there are circular references in operations, or when the server detects recursive operations. Common in file management systems and collaborative editing scenarios.\n\nThe server detected an infinite loop. The client should check the request for circular references and retry.",
          "markdownDescription": "508 Loop Detected\n\nIndicates that the server detected an infinite loop while processing the request.\n\nThe server detected an infinite loop in the request processing, typically in WebDAV operations.\n\nUsed in WebDAV environments when there are infinite loops in request processing, when there are circular references in operations, or when the server detects recursive operations. Common in file management systems and collaborative editing scenarios.\n\nThe server detected an infinite loop. The client should check the request for circular references and retry."
        },
        "510": {
          "$ref": "#/definitions/Response",
          "description": "510 Not Extended — OBSOLETED\n\nThis status code is obsolete and should not be used in modern implementations.\n\nThis status code was used for HTTP extensions but is now obsolete and should not be used.\n\nNot used in modern web applications. This code is obsolete and should not be implemented.\n\nThis status code should not be encountered in modern web applications.",
          "markdownDescription": "510 Not Extended — OBSOLETED\n\nThis status code is obsolete and should not be used in modern implementations.\n\nThis status code was used for HTTP extensions but is now obsolete and should not be used.\n\nNot used in modern web applications. This code is obsolete and should not be implemented.\n\nThis status code should not be encountered in modern web applications."
        },
        "511": {
          "$ref": "#/definitions/Response",
          "description": "511 Network Authentication Required\n\nIndicates that the client needs to authenticate to gain network access.\n\nThe client must authenticate with the network before it can access the requested resource.\n\nUsed in captive portal scenarios, public Wi-Fi networks, or when network-level authentication is required. Common in public networks, hotels, airports, and other locations where network access requires authentication.\n\nThe client needs to authenticate with the network. The client should follow the authentication process provided by the network.",
          "markdownDescription": "511 Network Authentication Required\n\nIndicates that the client needs to authenticate to gain network access.\n\nThe client must authenticate with the network before it can access the requested resource.\n\nUsed in captive portal scenarios, public Wi-Fi networks, or when network-level authentication is required. Common in public networks, hotels, airports, and other locations where network access requires authentication.\n\nThe client needs to authenticate with the network. The client should follow the authentication process provided by the network."
        },
        "default": {
          "$ref": "#/definitions/Response",
          "description": "default — The default response for all codes not covered individually.",
          "markdownDescription": "default — The default response for all codes not covered individually."
        }
      },
      "additionalProperties": false,
      "description": "Swagger 2.0 Valid HTTP Status Codes\n\nEnumerates individual HTTP status codes (as keys) plus the special `\"default\"` key, per the IANA HTTP Status Code Registry. JSDoc reason phrases and references mirror the registry entries. See also RFC 9110 (HTTP Semantics) section mappings.",
      "markdownDescription": "Swagger 2.0 Valid HTTP Status Codes\n\nEnumerates individual HTTP status codes (as keys) plus the special `\"default\"` key,\nper the IANA HTTP Status Code Registry. JSDoc reason phrases and references mirror\nthe registry entries. See also RFC 9110 (HTTP Semantics) section mappings."
    },
    "Response": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A short description of the response. GitHub Flavored Markdown syntax can be used for rich text representation.\n\nSee [GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown) for more information about the syntax. This field is required.",
          "markdownDescription": "A short description of the response.\nGitHub Flavored Markdown syntax can be used for rich text representation.\n\nSee [GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown) for more information about the syntax.\nThis field is required.",
          "examples": [
            "User successfully retrieved",
            "Bad request - invalid input parameters",
            "Internal server error"
          ]
        },
        "schema": {
          "$ref": "#/definitions/Schema",
          "description": "A definition of the response structure. It can be a primitive, an array or an object. If this field does not exist, it means no content is returned as part of the response. As an extension to the Schema Object, its root type value may also be \"file\". This SHOULD be accompanied by a relevant produces mime-type.",
          "markdownDescription": "A definition of the response structure. It can be a primitive, an array or an object.\nIf this field does not exist, it means no content is returned as part of the response.\nAs an extension to the Schema Object, its root type value may also be \"file\".\nThis SHOULD be accompanied by a relevant produces mime-type.",
          "examples": [
            {
              "$ref": "#/definitions/User"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Header"
          },
          "description": "A list of headers that are sent with the response.",
          "markdownDescription": "A list of headers that are sent with the response.",
          "examples": [
            {
              "X-RateLimit-Limit": {
                "type": "integer",
                "description": "Rate limit"
              }
            }
          ]
        },
        "examples": {
          "$ref": "#/definitions/Examples",
          "description": "An example of the response message.",
          "markdownDescription": "An example of the response message.",
          "examples": [
            {
              "application/json": {
                "id": 1,
                "name": "John Doe"
              }
            }
          ]
        }
      },
      "required": [
        "description"
      ],
      "description": "Response Object\n\nDescribes a single response from an API Operation. A container for the expected responses of an operation. The container maps a HTTP response code to the expected response. It is not expected from the documentation to necessarily cover all possible HTTP response codes because they may not be known in advance. However, it is expected from the documentation to cover a successful operation response and any known errors.",
      "markdownDescription": "Response Object\n\nDescribes a single response from an API Operation. A container for the expected\nresponses of an operation. The container maps a HTTP response code to the expected\nresponse. It is not expected from the documentation to necessarily cover all\npossible HTTP response codes because they may not be known in advance. However,\nit is expected from the documentation to cover a successful operation response\nand any known errors."
    },
    "Header": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief description of the header. GFM syntax can be used for rich text representation.",
          "markdownDescription": "A brief description of the header. GFM syntax can be used for rich text representation.",
          "examples": [
            "Rate limit for the current period",
            "Content type of the response"
          ]
        },
        "type": {
          "type": "string",
          "description": "The type of the object. The value MUST be one of \"string\", \"number\", \"integer\", \"boolean\", or \"array\". This field is required.",
          "markdownDescription": "The type of the object. The value MUST be one of \"string\", \"number\", \"integer\",\n\"boolean\", or \"array\".\nThis field is required.",
          "examples": [
            "string",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string",
          "description": "The extending format for the previously mentioned type. See Data Type Formats for further details.",
          "markdownDescription": "The extending format for the previously mentioned type. See Data Type Formats\nfor further details.",
          "examples": [
            "int32",
            "date",
            "email"
          ]
        },
        "items": {
          "$ref": "#/definitions/Items",
          "description": "Required if type is \"array\". Describes the type of items in the array.",
          "markdownDescription": "Required if type is \"array\". Describes the type of items in the array.",
          "examples": [
            {
              "type": "string"
            },
            {
              "type": "integer",
              "format": "int32"
            }
          ]
        },
        "collectionFormat": {
          "type": "string",
          "enum": [
            "csv",
            "ssv",
            "tsv",
            "pipes"
          ],
          "description": "Determines the format of the array if type array is used. Possible values are:\n- csv: comma separated values foo,bar\n- ssv: space separated values foo bar\n- tsv: tab separated values foo\\tbar\n- pipes: pipe separated values foo|bar",
          "markdownDescription": "Determines the format of the array if type array is used. Possible values are:\n- csv: comma separated values foo,bar\n- ssv: space separated values foo bar\n- tsv: tab separated values foo\\tbar\n- pipes: pipe separated values foo|bar",
          "examples": [
            "multi"
          ],
          "default": "csv"
        },
        "default": {
          "description": "Declares the value of the header that the server will use if none is provided. This value MUST conform to the defined type for the header.",
          "markdownDescription": "Declares the value of the header that the server will use if none is provided.\nThis value MUST conform to the defined type for the header.",
          "examples": [
            "defaultValue",
            10
          ]
        },
        "maximum": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "examples": [
            100
          ]
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2",
          "examples": [
            false
          ]
        },
        "minimum": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "examples": [
            0
          ]
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3",
          "examples": [
            false
          ]
        },
        "maxLength": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1",
          "examples": [
            100
          ]
        },
        "minLength": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2",
          "examples": [
            1
          ]
        },
        "pattern": {
          "type": "string",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3",
          "examples": [
            "^[a-zA-Z0-9]+$"
          ]
        },
        "maxItems": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2",
          "examples": [
            10
          ]
        },
        "minItems": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3",
          "examples": [
            1
          ]
        },
        "uniqueItems": {
          "type": "boolean",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4",
          "examples": [
            true
          ]
        },
        "enum": {
          "type": "array",
          "items": {},
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1",
          "examples": [
            [
              "option1",
              "option2",
              "option3"
            ]
          ]
        },
        "multipleOf": {
          "type": "number",
          "description": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1",
          "markdownDescription": "See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1",
          "examples": [
            2
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "Header Object\n\nDescribes a single header parameter. A list of all headers that are sent with the response. The name is used to refer to the respective header definition. The value of the header is of type string.",
      "markdownDescription": "Header Object\n\nDescribes a single header parameter. A list of all headers that are sent with\nthe response. The name is used to refer to the respective header definition.\nThe value of the header is of type string."
    },
    "Examples": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "description": "The name of the property MUST be one of the Operation produces values (either implicit or inherited). The value SHOULD be an example of what such a response would look like.\n\nThe property name corresponds to a MIME type that the operation can produce. The value should be a realistic example of the response data in that format.",
            "markdownDescription": "The name of the property MUST be one of the Operation produces values\n(either implicit or inherited). The value SHOULD be an example of what\nsuch a response would look like.\n\nThe property name corresponds to a MIME type that the operation can produce.\nThe value should be a realistic example of the response data in that format.",
            "examples": [
              {
                "application/json": {
                  "name": "Puma",
                  "type": "Dog"
                }
              },
              {
                "application/xml": "<pet><name>Puma</name></pet>"
              },
              {
                "text/plain": "Success"
              }
            ]
          },
          {}
        ]
      },
      "properties": {},
      "description": "----- Example Object\n-----\n\nAllows sharing examples for operation responses. Examples provide concrete instances of what the API response will look like, making it easier for developers to understand the expected data structure and format.\n\nExamples are commonly used by documentation generators and API testing tools to provide realistic sample data that developers can use as a reference when implementing client applications.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#example-object Swagger 2.0 Example Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nExample Object\n-----\n\nAllows sharing examples for operation responses. Examples provide concrete\ninstances of what the API response will look like, making it easier for\ndevelopers to understand the expected data structure and format.\n\nExamples are commonly used by documentation generators and API testing tools\nto provide realistic sample data that developers can use as a reference\nwhen implementing client applications.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#example-object Swagger 2.0 Example Object }  |\n\n-----\nFields\n-----"
    },
    "Definitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Schema"
      },
      "description": "----- Definitions Object\n-----\n\nAn object to hold data types that can be consumed and produced by operations. These data types can be primitives, arrays or models.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#definitions-object Swagger 2.0 Definitions Object }  |\n\n----- Examples\n-----",
      "markdownDescription": "-----\nDefinitions Object\n-----\n\nAn object to hold data types that can be consumed and produced by operations.\nThese data types can be primitives, arrays or models.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#definitions-object Swagger 2.0 Definitions Object }  |\n\n-----\nExamples\n-----"
    },
    "ParametersDefinitions": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/Parameter"
          },
          {
            "$ref": "#/definitions/BaseReference"
          }
        ]
      },
      "description": "----- Parameters Definitions Object\n-----\n\nAn object to hold parameters to be reused across operations. Parameter definitions can be referenced to the ones defined here. This does not define global operation parameters.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#parameters-definitions-object Swagger 2.0 Parameters Definitions Object }  |\n\n----- Examples\n-----",
      "markdownDescription": "-----\nParameters Definitions Object\n-----\n\nAn object to hold parameters to be reused across operations. Parameter definitions\ncan be referenced to the ones defined here. This does not define global operation parameters.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#parameters-definitions-object Swagger 2.0 Parameters Definitions Object }  |\n\n-----\nExamples\n-----"
    },
    "ResponsesDefinitions": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/Response"
          },
          {
            "$ref": "#/definitions/BaseReference"
          }
        ]
      },
      "description": "----- Responses Definitions Object\n-----\n\nAn object to hold responses to be reused across operations. Response definitions can be referenced to the ones defined here. This does not define global operation responses.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#responses-definitions-object Swagger 2.0 Responses Definitions Object }  |\n\n----- Examples\n-----",
      "markdownDescription": "-----\nResponses Definitions Object\n-----\n\nAn object to hold responses to be reused across operations. Response definitions\ncan be referenced to the ones defined here. This does not define global operation responses.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#responses-definitions-object Swagger 2.0 Responses Definitions Object }  |\n\n-----\nExamples\n-----"
    },
    "SecurityDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/SecurityScheme"
      },
      "description": "Security Definitions Object\n\nA declaration of the security schemes available to be used in the specification. This does not enforce the security schemes on the operations and only serves to provide the relevant details for each scheme.",
      "markdownDescription": "Security Definitions Object\n\nA declaration of the security schemes available to be used in the specification.\nThis does not enforce the security schemes on the operations and only serves to\nprovide the relevant details for each scheme."
    },
    "SecurityScheme": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "basic",
            "apiKey",
            "oauth2"
          ],
          "description": "The type of the security scheme. Valid values are \"basic\", \"apiKey\" or \"oauth2\". This field is required.\n\n- **basic**: Basic HTTP authentication\n- **apiKey**: API key authentication (header or query parameter)\n- **oauth2**: OAuth 2.0 authentication",
          "markdownDescription": "The type of the security scheme. Valid values are \"basic\", \"apiKey\" or \"oauth2\".\nThis field is required.\n\n- **basic**: Basic HTTP authentication\n- **apiKey**: API key authentication (header or query parameter)\n- **oauth2**: OAuth 2.0 authentication",
          "examples": [
            "apiKey",
            "oauth2",
            "basic"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description for security scheme. GFM syntax can be used for rich text representation.",
          "markdownDescription": "A short description for security scheme. GFM syntax can be used for rich text representation.",
          "examples": [
            "API key for authentication",
            "OAuth 2.0 with authorization code flow"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the header or query parameter to be used. This field is required for apiKey type and applies to apiKey type only.",
          "markdownDescription": "The name of the header or query parameter to be used. This field is required\nfor apiKey type and applies to apiKey type only.",
          "examples": [
            "X-API-Key",
            "Authorization"
          ]
        },
        "in": {
          "type": "string",
          "enum": [
            "query",
            "header"
          ],
          "description": "The location of the API key. This field is required for apiKey type and applies to apiKey type only. Valid values are \"query\" or \"header\".",
          "markdownDescription": "The location of the API key. This field is required for apiKey type and\napplies to apiKey type only. Valid values are \"query\" or \"header\".",
          "examples": [
            "header",
            "query"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "implicit",
            "password",
            "application",
            "accessCode"
          ],
          "description": "The flow used by the OAuth2 security scheme. This field is required for oauth2 type and applies to oauth2 type only. Valid values are \"implicit\", \"password\", \"application\" or \"accessCode\".\n\n- **implicit**: Implicit flow\n- **password**: Resource owner password credentials flow\n- **application**: Client credentials flow\n- **accessCode**: Authorization code flow",
          "markdownDescription": "The flow used by the OAuth2 security scheme. This field is required for\noauth2 type and applies to oauth2 type only. Valid values are \"implicit\",\n\"password\", \"application\" or \"accessCode\".\n\n- **implicit**: Implicit flow\n- **password**: Resource owner password credentials flow\n- **application**: Client credentials flow\n- **accessCode**: Authorization code flow",
          "examples": [
            "accessCode",
            "implicit",
            "password"
          ]
        },
        "authorizationUrl": {
          "type": "string",
          "description": "The authorization URL to be used for this flow. This SHOULD be in the form of a URL. This field is required for oauth2 type and applies to oauth2 type only.",
          "markdownDescription": "The authorization URL to be used for this flow. This SHOULD be in the form of\na URL. This field is required for oauth2 type and applies to oauth2 type only.",
          "examples": [
            "https://example.com/oauth/authorize",
            "https://api.example.com/oauth/authorize"
          ]
        },
        "tokenUrl": {
          "type": "string",
          "description": "The token URL to be used for this flow. This SHOULD be in the form of a URL. This field is required for oauth2 type and applies to oauth2 type only.",
          "markdownDescription": "The token URL to be used for this flow. This SHOULD be in the form of a URL.\nThis field is required for oauth2 type and applies to oauth2 type only.",
          "examples": [
            "https://example.com/oauth/token",
            "https://api.example.com/oauth/token"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/Scopes",
          "description": "The available scopes for the OAuth2 security scheme. The key is the scope name and the value is a short description of the scope. This field is required for oauth2 type and applies to oauth2 type only.",
          "markdownDescription": "The available scopes for the OAuth2 security scheme. The key is the scope name\nand the value is a short description of the scope. This field is required for\noauth2 type and applies to oauth2 type only.",
          "examples": [
            {
              "read": "Read access to resources",
              "write": "Write access to resources"
            },
            {
              "admin": "Administrative access"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "description": "Security Scheme Object\n\nDefines a security scheme that can be used by the operations. Supported schemes are basic authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).",
      "markdownDescription": "Security Scheme Object\n\nDefines a security scheme that can be used by the operations. Supported schemes\nare basic authentication, an API key (either as a header or as a query parameter)\nand OAuth2's common flows (implicit, password, application and access code)."
    },
    "Scopes": {
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "description": "Maps between a name of a scope to a short description of it (as the value of the property). The key is the scope name and the value is a short description of the scope.",
        "markdownDescription": "Maps between a name of a scope to a short description of it (as the value of the property).\nThe key is the scope name and the value is a short description of the scope.",
        "examples": [
          {
            "read": "Read access to resources",
            "write": "Write access to resources"
          },
          {
            "admin": "Administrative access"
          }
        ]
      },
      "description": "Scopes Object\n\nLists the available scopes for an OAuth2 security scheme.",
      "markdownDescription": "Scopes Object\n\nLists the available scopes for an OAuth2 security scheme."
    },
    "SecurityRequirement": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Each name must correspond to a security scheme which is declared in the Security Definitions. If the security scheme is of type \"oauth2\", then the value is a list of scope names required for the execution. For other security scheme types, the array MUST be empty.",
        "markdownDescription": "Each name must correspond to a security scheme which is declared in the Security Definitions.\nIf the security scheme is of type \"oauth2\", then the value is a list of scope names\nrequired for the execution. For other security scheme types, the array MUST be empty.",
        "examples": [
          {
            "api_key": []
          },
          {
            "oauth2": [
              "read",
              "write"
            ]
          }
        ]
      },
      "description": "Security Requirement Object\n\nLists the required security schemes to execute this operation. The object can have multiple security schemes declared in it which are all required (that is, there is a logical AND between the schemes). The name used for each property MUST correspond to a security scheme declared in the Security Definitions.",
      "markdownDescription": "Security Requirement Object\n\nLists the required security schemes to execute this operation. The object can have\nmultiple security schemes declared in it which are all required (that is, there is\na logical AND between the schemes). The name used for each property MUST correspond\nto a security scheme declared in the Security Definitions."
    },
    "Tag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag. This field is required and MUST be unique.\n\nThe tag name is used to reference this tag in Operation objects and must be unique within the entire specification. It should be descriptive and follow a consistent naming convention.",
          "markdownDescription": "The name of the tag. This field is required and MUST be unique.\n\nThe tag name is used to reference this tag in Operation objects and\nmust be unique within the entire specification. It should be descriptive\nand follow a consistent naming convention.",
          "examples": [
            "users",
            "pets",
            "authentication",
            "reports"
          ]
        },
        "description": {
          "type": "string",
          "description": "A short description for the tag. GFM syntax can be used for rich text representation.\n\nThis description provides context about what operations belong to this tag and helps developers understand the purpose and scope of the tag.",
          "markdownDescription": "A short description for the tag. GFM syntax can be used for rich text representation.\n\nThis description provides context about what operations belong to this tag\nand helps developers understand the purpose and scope of the tag.",
          "examples": [
            "User management operations",
            "Pet store operations including CRUD operations for pets",
            "Authentication and authorization operations"
          ]
        },
        "externalDocs": {
          "$ref": "#/definitions/ExternalDocumentation",
          "description": "Additional external documentation for this tag.\n\nThis allows for more detailed documentation about the tag and its associated operations to be provided via external resources.",
          "markdownDescription": "Additional external documentation for this tag.\n\nThis allows for more detailed documentation about the tag and its\nassociated operations to be provided via external resources.",
          "examples": [
            {
              "description": "Find out more about user management",
              "url": "https://example.com/docs/users"
            },
            {
              "description": "Pet management API documentation",
              "url": "https://petstore.example.com/docs"
            }
          ]
        }
      },
      "required": [
        "name"
      ],
      "description": "----- Tag Object\n-----\n\nA grouping tag for operations. Tags can be used for logical grouping of operations by resources or any other qualifier. The order of the tags can be used to reflect on their order by the parsing tools. Not all tags that are used by the Operation Object must be declared. The tags that are not declared may be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.\n\nTags provide a way to organize and categorize API operations, making it easier for developers to understand and navigate the API. They are commonly used to group operations by resource type, functionality, or any other logical division.\n\n| Version | Reference | |---|-----| | 2.0     |  {@link  https://swagger.io/specification/v2/#tag-object Swagger 2.0 Tag Object }  |\n\n----- Fields\n-----",
      "markdownDescription": "-----\nTag Object\n-----\n\nA grouping tag for operations. Tags can be used for logical grouping of operations\nby resources or any other qualifier. The order of the tags can be used to reflect\non their order by the parsing tools. Not all tags that are used by the Operation\nObject must be declared. The tags that are not declared may be organized randomly\nor based on the tools' logic. Each tag name in the list MUST be unique.\n\nTags provide a way to organize and categorize API operations, making it easier\nfor developers to understand and navigate the API. They are commonly used to\ngroup operations by resource type, functionality, or any other logical division.\n\n| Version | Reference |\n|---|-----|\n| 2.0     |  {@link  https://swagger.io/specification/v2/#tag-object Swagger 2.0 Tag Object }  |\n\n-----\nFields\n-----"
    }
  }
}